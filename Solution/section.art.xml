<?xml version="1.0" encoding="UTF-8"?>
<section id="art">
	<title>艺术品区块链溯源防伪平台</title>
	<section>
		<title>都有哪些角色参与其中</title>
		<para>参与艺术品上链，鉴定，交易包含了下面几种角色。</para>
		<itemizedlist>
			<title>平台至少有三种角色会</title>
			<listitem>用户</listitem>
			<listitem>机构</listitem>
			<listitem>鉴定师</listitem>
			<listitem>艺术家</listitem>
		</itemizedlist>
		<para>所以我们需要为不同的角色提供不同的App应用。</para>
		<para>用户端：功能包括防伪查询，链上资产的浏览，权益转让，资产拍卖，资产抵押，社区互动，分享，数字资产行情，钱包等等</para>
		<para>机构端：负责信息收集，信息整理，数据提交，数据审查，资产上链，资产划拨等等</para>
		<para>鉴定师：负责数字资产的鉴定，需要有相关资质。</para>

	</section>
	<section>
		<title>需要运用哪些技术</title>
		<itemizedlist>
			<title>防伪溯源涉及的技术栈</title>
			<listitem>纸纹防伪（PaperPrint），纸纹防伪即纸纹防伪技术。它是一种基于提取和识别每张纸与生俱来的、独一无二且无法仿造、克隆的自然纤维纹理作为防伪特征（即纸纹）来实现防伪的新型防伪技术。</listitem>
			<!-- https://www.sinosun.com.cn/paperprint/ -->
			<listitem>荧光防伪油墨，使用荧光油墨印刷技术，在特定波长的紫外线或者红外线下才能看到。荧光二维码，荧光印章，荧光指纹，荧光暗记，布满整个宣纸的荧光图案。我们可以为每个艺术家定制带有荧光图案的专属纸张。</listitem>
			<listitem>DNA防伪, 将艺术家的血液滴在书画上或者头发夹在宣纸中间。据说某中世纪著名画家将自己的精液和油画颜料混合 ：）</listitem>
			<listitem>特征识别防伪，类似我们手机的面部识别，记录物品的特征，例如使用电子显微镜平射纸文理，画面局部等等。油画还可以拍摄X光片。</listitem>
			<listitem>3D 建模扫描，例如3D扫描仪，将物品的3D数据记录下来。</listitem>
			<listitem>激光内雕，例如施华洛世奇将 logo 内雕在他的水晶制品中。</listitem>
			<listitem>QRcode 二维码，用于链上数据查询</listitem>
			<listitem>NFC(Near Field Communication) 有两个作用，一可以存储数据，二用来防伪，因为生产相同UID的NFC芯片难度极大，门槛很高。</listitem>
			<listitem>RFID(Radio Frequency Identification) 是 NFC 的一种，区别是不能存储数据，NFC 不能替代 RFID，RFID 可以实现资产盘点，以及安防。</listitem>
			<listitem>GPS 定位与地图，记录用户位置，资产位置，机构位置，鉴定师位置，还能实现次产跟踪，例如两次查询资产的GPS坐标，不在安全范围，将视为被盗，系统将通知机构或用户。</listitem>
			<listitem>高清相机、高清视频设备</listitem>
			<listitem>安防设备，CCTV监控，门禁等等</listitem>
		</itemizedlist>
		<para>举例，书画怎样做防伪</para>
		<para>以国画为例，我们首先找一个宣纸企业合作，在宣纸生产过程中，将NFC芯片夹在宣纸中间，然后我们使用荧光油墨在宣纸上印刷防伪图案。也可以采用人民币上的金属丝方案，最后拍摄纸纹。视频记录下艺术家的整个作画过程，然后再拍摄特征数据。最后使用激光打孔技术，在宣纸上打出防伪图案数据，针孔极小肉眼难以分辨，每个防伪数据都是唯一的。</para>
		<para>油画可以讲NFC芯片放在纺织布中，使用堆彩技术的画家可以讲NFC芯片覆盖（埋植）在颜料下面</para>

	</section>

	<section>
		<title>技术架构</title>
		<!-- <para>区块链项目与传统有很大不同，由于数据存储再公链或者盟链上，服务器，带宽，需要要的技术。</para> -->
		<section>
			<title>前端技术</title>
			<para>由于 H5 技术无法满足我们的需求，例如相机，麦克风，NFC，定位...等等。我们重点放在 App 开发，H5 紧紧用于官网，区块链浏览器，资讯，等等。</para>
			<para>由于使用了很多手机上技术，原生App更适合，而混合开发 React Native，Vue.js, Flutter 不在我们选择之列。</para>
			<para>微信小程序可以考虑，但是如果涉及 Token 可能随时会被下架。</para>
		</section>
		<section>
			<title>微服务端</title>
			<para>服务端设计为可以水平扩展，可以随时根据用户量，扩展服务器规模。</para>
			<para>Nginx 负载均衡，HTTP2 （安卓 Okhttp 已经很好的支持 http2）</para>
			<para>框架采用 Spring cloud</para>
			<para>数据库开发使用 JPA</para>
			<para>接口认证 Oauth2 + Jwt</para>
			<para></para>
		</section>
		<section>
			<title>存储层</title>
			<para>MongoDB</para>
			<para>Redis</para>
		</section>
		<section>
			<title>消息队列层</title>
			<para>Kafka</para>
		</section>
		<section>
			<title>搜索层</title>
			<para>ELK(ElasticSearch, Logstash, Kibana)</para>
			<para>搜索是非常重要的功能，因为区块链只能通过 hash 值取出链上的数据，虽然 Hyperledger Fabrc 在数据使用 CouchDB 时提供了 World State 的一些高级搜索功能，但是仍然不能满足我们的需求。</para>
			<para>所以链上数据需要存储一份在搜索引擎中，搜索引擎的分词功能，可以提供快速精准的搜索服务。</para>
			<para>搜索引擎的工作流程是：</para>
			<screen>
			<![CDATA[
User --> Phone App --> Nginx --> Spring cloud --> Elastsearch --> Hyperledger Fabric	
			]]>
			</screen>
		</section>
		<section>
			<title>区块链</title>
			<para>我们不做山寨链，我发现很多国内企业热衷于做山寨链，什么事山寨链呢，就是在现有的区块链(Ethereum, Hyperledger Fabric 或 EOS) 的基础上二次开发，首先开发山寨链需要大量的资金人力，私链是没有任何意义的，没有公信力。即使目前的现有区块链无法满足我们的需求，可以通过架构调节去适应他。</para>
			<para>所以我们只用最成熟的产品：</para>
			<para>Hyperledger Fabric 盟链：主要用于资产上链，链上资产查询</para>
			<para>Ethereum 公链：用于 Token ，由于 Hyperledger Fabric 无法实现 Token，所以我们仍然需要以太坊。（作者写过一篇文章关于为什么Hyperledger Fabric 不能实现 Token，请兴趣自己在网上搜索） </para>
			<para>EOS Token/资产上链：由于在我设计这个系统之时 EOS 还没有 Release 所以当时没有考虑 EOS。现在我们可以使用 EOS，甚至替换掉 Hyperledger Fabrc + Ethereum 方案。因为 EOS 即能实现资产上链，也能实现 Token。 这里我们将资产也在 EOS 上链一份，同时也支持 EOS 发的 Token。</para>
			<para>IPFS 星际文件系统：用于存储多媒体数据，例如图片，视频。（注意：IPFS 暂时不支持流媒体，我的解决方案是上链同事复制一份到 nginx 中，并开启 mp4 流媒体功能）</para>
			<para>注：虽然以太坊目前尝尝拥堵，但是很多应用场景仍是不可替代的。</para>
		</section>
		<section>
			<title>支持层</title>
			<para>监控 Zabbix</para>
		</section>
	</section>

	<section id="nfc">
		<title>RFID/NFC</title>
		<para>NFC基本概念：  </para>
		<para>NFC(Near Field Communication)缩写，即近距离无线通讯技术。由飞利浦公司和索尼公司共同开发的一项无线技术。NFC由非接触式射频识别及互联互通技术整合演变而来，可以在移动设备、消费类电子产品、PC和智能控件工具间进行近距离无线通信。NFC提供了一种简单、触控式的解决方案，可以让消费者简单直观地交换信息、访问内容与服务。  NFC技术特点：  1、 在13.56MHz频率运行距离在20公分内；  2、 传输速度可分106Kbits/sec，212 Kbits/sec，424 Kbits/sec；  3、 运作可分主动与被动模式。主动模式需使用电池，也需要独立发射模组；被动模式不需使用电池，但无法独立发射讯号；  4、 已成为ISO/IEC IS 18092国家标准、ETSI TS 102 190标准、EMCA-340标准。</para>

		<para>RFID基本概念：</para>
		<para>RFID(Radio Frequency Identification)的缩写，即射频识别，俗称电子标签。  RFID射频识别是一种非接触式的自动识别技术，它通过射频信号自动识别目标对象并获取相关数据，识别工作无须人工干预，可工作于各种恶劣环境。  RFID是一种简单的无线系统，只有两个基本器件，该系统用于控制、检测和跟踪物体。系统由一个询问器(或阅读器)和很多应答器(或标签)组成。 </para>
		<para>RFID包括：  低频125KHz  主要是动物管理  中频 一般指433MHz（这个频段一般也是有源的 也有做高速收费）  高频13.56MHz 公交卡 身份证都是这个频段。  超高频860-960MHz 主要用在物流和停车场管理。 微波2.45GHz  ETC用这个频段的多</para>

		<itemizedlist>
			<title>RFID/NFC 比较</title>
			<listitem>距离，RFID远，NFC进</listitem>
			<listitem>RIFD由读卡器和标签组成，读卡器只能读取标签上的数据。NFC既可以做读卡器，也能提供标签服务，还能实现P2P点对点传输数据。</listitem>
			<listitem>修改，RFID是只读的，NFC上的数据可以修改，例如公交卡</listitem>
			<listitem></listitem>
		</itemizedlist>
		<para>NFC 标签可以使用易碎纸粘贴在艺术品上，缺点是寿命较短。使用PVC材料又容易撕下。</para>
		<section>
			<title>手机NFC功能</title>
			<para>NFC是近场通信，支持13.56MHz，因此用手机的NFC来读取13.56MHz的RFID电子标签，在硬件上是没有问题的.</para>
		</section>
		<section>
			<title>NFC 标准</title>
			<para>历史记录</para>
			<screen>
			<![CDATA[
ISO14443-4
ISO14443-3A
ISO14443-3B	
			]]>
			</screen>
		</section>
		<section id="nfc.date">
			<title>NFC 数据格式</title>
			<section id="NDEF">
				<title>NDEF (NFC Data Exchange Format)</title>
				<screen>
			<![CDATA[
Value    Protocol
-----    --------
0x00     No prepending is done ... the entire URI is contained in the URI Field
0x01     http://www.
0x02     https://www.
0x03     http://
0x04     https://
0x05     tel:
0x06     mailto:
0x07     ftp://anonymous:anonymous@
0x08     ftp://ftp.
0x09     ftps://
0x0A     sftp://
0x0B     smb://
0x0C     nfs://
0x0D     ftp://
0x0E     dav://
0x0F     news:
0x10     telnet://
0x11     imap:
0x12     rtsp://
0x13     urn:
0x14     pop:
0x15     sip:
0x16     sips:
0x17     tftp:
0x18     btspp://
0x19     btl2cap://
0x1A     btgoep://
0x1B     tcpobex://
0x1C     irdaobex://
0x1D     file://
0x1E     urn:epc:id:
0x1F     urn:epc:tag:
0x20     urn:epc:pat:
0x21     urn:epc:raw:
0x22     urn:epc:
0x23     urn:nfc:		
			]]>
				</screen>
			</section>

		</section>
		<section>
			<title>NXP（恩智浦）相关产品</title>
			<section id="MifareUltralight">
				<title>MifareUltralight</title>
				<para>艺术品数字身份证</para>
				<para>ID</para>
				<screen>
				<![CDATA[
将NFC标签的存储区域分为16个页，每一个页可以存储4个字节，一个可存储64个字节（512位）。页码从0开始（0至15）。前4页（0至3）存储了NFC标签相关的信息（如NFC标签的序列号、控制位等）。从第5页开始存储实际的数据（4至15页）。
				]]>
				</screen>
				<para>NTAG21x系列容量大小</para>
				<screen>
				<![CDATA[
NTAG210 48byte
NTAG213 144byte
NTAG215 504byte
NTAG216，888byte	
				]]>
				</screen>
			</section>

			<section>
				<title>MifareClassic</title>
			</section>


			<section>
				<title>Mifare</title>

			</section>
		</section>
	</section>
	<section>
		<title>资产投资与份额持有</title>
		<para>传统艺术品投资门槛非常高，一是用户不知道从哪些渠道可以投资，二是艺术品价值过高，三是艺术品鉴定难。这导致了投资艺术品门槛过高。 Token 能实现份额化，实现人人参与，人人持有，P2P交易。</para>
		<para>例如某机构上链一件艺术品，用户可以投资该艺术品的一定份额，可以转让他持有的权益。且交易去中心化，不受任何机构，管理者的制约。</para>
		<para>下面的合约可以展示如何分割艺术品份额，最终达到链上资产的份额分割和持有与交易。</para>
		<screen>
		<![CDATA[
pragma solidity ^0.4.25;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b);

    return c;
  }

  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;

    return c;
  }

  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);

    return c;
  }

  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}        

contract Ownable {
    
    address public owner;
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    constructor() public {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

}

contract NetkillerAssetsToken is Ownable {
    using SafeMath for uint256;
    
    string public name;
    string public symbol;
    uint public decimals;
    uint256 public totalSupply;
    
    mapping(address => mapping(string => uint256)) internal balances;
    mapping(string => address) internal tokens;
    
    event Transfer(address indexed _from, address indexed _to, string indexed _tokenId);
    event Burn(address indexed from, string _tokenId);
    
    constructor(
        string tokenName,
        string tokenSymbol,
        uint decimalUnits
    ) public {
        owner = msg.sender;
        name = tokenName;
        symbol = tokenSymbol; 
        decimals = decimalUnits;
        totalSupply = 0; 
    }
    
    function add(address _owner, string _tokenId) onlyOwner returns(bool status){
        balances[_owner][_tokenId] = 100 * 10 ** uint256(decimals);
        tokens[_tokenId] = _owner;
        totalSupply = totalSupply.add(1);
        return true;
    }
    
    function balanceOf(address _owner, string _tokenId) constant returns(uint balance){ 
        return balances[_owner][_tokenId];
    }

    function ownerOf(string _tokenId) constant returns (address owner) {
        return tokens[_tokenId];
    }
    
    function transfer(address _to, string _tokenId){
        
        address _from = msg.sender;
        uint256 amount = balances[_from][_tokenId];
        transfer(_to, amount, _tokenId);
    }
    function transfer(address _to, uint256 _value, string _tokenId){
        require(msg.sender == ownerOf(_tokenId));
        require(msg.sender != _to);
        require(_to != address(0));
        
        address _from = msg.sender;
        uint256 amount = balances[_from][_tokenId];
        require(amount >= _value);
        
        balances[_from][_tokenId] = balances[_from][_tokenId].sub(_value);
        balances[_to][_tokenId] = balances[_to][_tokenId].add(_value);
        tokens[_tokenId] = _to;

        emit Transfer(_from, _to, _tokenId);
    }
    
    function burn(address _owner, string _tokenId) onlyOwner public returns (bool success) {
        require(balances[_owner][_tokenId] > 0 && balances[_owner][_tokenId] == 100 * 10 ** uint256(decimals));

        balances[_owner][_tokenId] = 0;
        tokens[_tokenId] = address(0);

        totalSupply = totalSupply.sub(1);
        emit Burn(msg.sender, _tokenId);
        return true;
    }
    
}		
		]]>
		</screen>
		<para>由于 ERC721 不太符合我的需求，所以我结合 ERC20 和 ERC721 写出了我的合约。合约尽量保持了ERC20的使用习惯，函数定义尽量兼容 ERC20。</para>
		<para>我们来看下面的构造方法，每个种类的物品一个合约，例如字画，陶瓷，青铜器。</para>
		<screen>
		<![CDATA[
    constructor(
        string tokenName,
        string tokenSymbol,
        uint decimalUnits
    ) public {
        owner = msg.sender;
        name = tokenName;
        symbol = tokenSymbol; 
        decimals = decimalUnits;
        totalSupply = 0; 
    }
		]]>
		</screen>
		<para>通过下面函数，添加资产到 Token，使链上资产与Token绑定。</para>
		<screen>
		<![CDATA[
    function add(address _owner, string _tokenId) onlyOwner returns(bool status){
        balances[_owner][_tokenId] = 100 * 10 ** uint256(decimals);
        tokens[_tokenId] = _owner;
        totalSupply = totalSupply.add(1);
        return true;
    }		
		]]>
		</screen>
		<para>balances[_owner][_tokenId] = 100 * 10 ** uint256(decimals); 初始化份额是 100 表示 100%</para>
		<para>totalSupply = totalSupply.add(1); 物品件数加一。可以用于统计链上资产的数量。</para>
		<para>下面函数是查询资产的持有人</para>
		<screen>
		<![CDATA[
function ownerOf(string _tokenId) constant returns (address owner) {
        return tokens[_tokenId];
    }		
		]]>
		</screen>
		<para>下面函数是，权益转让和权益份额转让。</para>
		<screen>
		<![CDATA[
    function transfer(address _to, string _tokenId){
        
        address _from = msg.sender;
        uint256 amount = balances[_from][_tokenId];
        transfer(_to, amount, _tokenId);
    }
    function transfer(address _to, uint256 _value, string _tokenId){
        require(msg.sender == ownerOf(_tokenId));
        require(msg.sender != _to);
        require(_to != address(0));
        
        address _from = msg.sender;
        uint256 amount = balances[_from][_tokenId];
        require(amount >= _value);
        
        balances[_from][_tokenId] = balances[_from][_tokenId].sub(_value);
        balances[_to][_tokenId] = balances[_to][_tokenId].add(_value);
        tokens[_tokenId] = _to;

        emit Transfer(_from, _to, _tokenId);
    }		
		]]>
		</screen>
		<para>接下来，我们就是可以开发 Dapp 钱包了，在钱包中实现资产的转移交易。</para>
		<para>这个合约可以移植到 EOS 上，Hyperledger Fabric 不可以，因为 Fabric 没有锁的机制，会导致计算出错。</para>
	</section>
	<section>
		<title>资产上链的 Hyperledger Fabic 链码</title>
		<para>我们希望资产上链适用于任何领域，后面也方便将业务拓展。所以我实现了一个万能合约。以不变应万变。</para>
		<screen>
		<![CDATA[
package main

import (
	"fmt"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type SmartContract struct {}

func (s *SmartContract) Init(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}

func (s *SmartContract) Query(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}

func (s *SmartContract) Invoke(stub shim.ChaincodeStubInterface) pb.Response {

	// Retrieve the requested Smart Contract function and arguments
	function, args := stub.GetFunctionAndParameters()
	// Route to the appropriate handler function to interact with the ledger appropriately
	if function == "create" {
		return s.create(stub, args)
	} else if function == "find" {
		return s.find(stub, args)
	} else if function == "update" {
		return s.update(stub, args)
	} else if function == "delete" {
		return s.delete(stub, args)
	}

	return shim.Error("Invalid Smart Contract function name.")
}

func (s *SmartContract) create(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	if len(args) != 2 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	_key  	:= args[0]
	_data	:= args[1]

	if(_data == ""){
		return shim.Error("Incorrect string of data")
	}

	existAsBytes,err := stub.GetState(_key)
	if string(existAsBytes) != "" {
		fmt.Println("Failed to create account, Duplicate key.")
		return shim.Error("Failed to create account, Duplicate key.")
	}

	err = stub.PutState(_key, []byte(_data))
	if err != nil {
		return shim.Error(err.Error())
	}
	fmt.Printf("create %s %s \n", _key, string(_data))

	return shim.Success(nil)
}

func (s *SmartContract) find(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	_key  	:= args[0]
	_data, err := stub.GetState(_key)
	if err != nil {
		return shim.Error(err.Error())
	}
	if string(_data) == "" {
		return shim.Error("The key isn't exist.")
	}else{
		fmt.Printf("query %s %s \n", _key, string(_data))
	}

	return shim.Success(_data)
}

func (s *SmartContract) update(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	if len(args) != 2 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	_key  	:= args[0]
	_data	:= args[1]

	if(_data == ""){
		return shim.Error("Incorrect string of data")
	}

	err := stub.PutState(_key, []byte(_data))
	if err != nil {
		return shim.Error(err.Error())
	}else{
		fmt.Printf("update %s %s \n", _key, string(_data))
	}
	
	return shim.Success(nil)
}

// Deletes an entity from state
func (t *SmartContract) delete(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	_key := args[0]

	// Delete the key from the state in ledger
	err := stub.DelState(_key)
	if err != nil {
		return shim.Error("Failed to delete state")
	}

	return shim.Success(nil)
}

func main() {

	err := shim.Start(new(SmartContract))
	if err != nil {
		fmt.Printf("Error creating new Smart Contract: %s", err)
	}
}
		
		]]>
		</screen>
		<para>链码有四个函数，分别是创建，查找，更新，删除。</para>
		<screen>
		<![CDATA[
	if function == "create" {
		return s.create(stub, args)		// 创建
	} else if function == "find" {
		return s.find(stub, args)		// 查找
	} else if function == "update" {
		return s.update(stub, args)		// 更新
	} else if function == "delete" {
		return s.delete(stub, args)		// 删除
	}		
		]]>
		</screen>
		<para>上链使用 create 方法，函数有两个参数，一个是 key, 另一个是数据。</para>
		<para>key 使用 UUID 存储再数据库和链上，同时 UUID 对应通证的</para>
		<para>data 是序列化 byte 数据。例如可以使用 json, hession, msgpack 等序列化后的数据。</para>
		<screen>
		<![CDATA[
err = stub.PutState(_key, []byte(_data))		
		]]>
		</screen>
		<para>这个链码考虑到前期产品上市，不确定性因素很多，需要更新和删除等等。后期我们可以在数据中设置一个 status 变量，当 status = false 就不在允许数据的删除和更新。</para>
	</section>
	<section>
		<title>原型设计</title>
		<section>
			<title>注册与登录</title>
			<itemizedlist>
				<title>注册</title>
				<listitem>安装APP后，点击注册链接，进入注册界面。</listitem>
				<listitem>用户类型选择选择 “机构”或者”鉴定师”。对于前台只有用户一种角色。</listitem>
				<listitem>输入手机号码，然后获取验证码</listitem>
				<listitem>输入密码</listitem>
				<listitem>点击注册按钮，完成注册</listitem>
			</itemizedlist>

			<itemizedlist>
				<title>登录,平台提供多重登录方式</title>
				<listitem>密码登录</listitem>
				<listitem>验证码登录</listitem>
				<listitem>微信登录</listitem>
				<listitem>指纹登录</listitem>
				<listitem>面部识别登录</listitem>
				<listitem>助记词登录</listitem>
				<listitem>私钥登录</listitem>
				<listitem>闪付卡登录(类似银行卡的 QuickPass 闪付，可以在 Post 机上做 Token 付款，转账等操作)</listitem>
			</itemizedlist>
		</section>
		<section>
			<title>用户角色</title>
			<para>用户是权益持有人,当用户（用户端）委托机构负责自己的资产上链。权益持有人一次性获得次产权益100%份额，机构可以查看的机构名下的权益持有人。</para>
		</section>
		<section>
			<title>鉴定师角色</title>
			<para>鉴定师是管理机构认证并颁发资质证书人员，艺术品溯源区块链领域，他主要的职责事艺术品鉴定。鉴定师可以挂靠到机构。</para>
			<para>如何注册成为鉴定师？</para>
			<screen>
			<![CDATA[
		首先进入APP -> 点击『注册 』->阅读条款->点击同意按钮。
		输入手机号码，发送验证码，输入密码，重复输入密码，选择『鉴定师』，提交。			
			]]>
			</screen>
			<para>注册成功会自动登录，进入完善资料页面，鉴定师需要实名认证，上传身份证信息，鉴定师证书，等等资质文件。鉴定师需要仔细填写每一项，并保证资料的真实性。</para>
			<para>提交资料后，等待管理机构审批，管理机构会仔细核对每项数据。如果被拒，需要鉴定师重新填写，再提交。</para>
			<para>审批通过前，只能看到鉴定师信息页面。 审批通过后，可以看到，鉴定师信息，已签名资产，未处理资产。</para>
			<para>怎样鉴定物品？</para>
			<para>鉴定师登录APP后，进入『我的』可以看淡未处理资产菜单，进入菜单可以看到任务列表。点开一件物品，将鉴定结果提交上去，完成鉴定。鉴定师可以在[已签名资产]中查看自己鉴定过的物品。</para>
		</section>
		<section>
			<title>机构角色</title>
			<para>机构主要负责资产上链，审查，资产托管</para>
			<itemizedlist>
				<title>如何注册成为机构</title>
				<listitem>首先进入APP -> 点击『注册 』->阅读条款->点击同意按钮。				</listitem>
				<listitem>输入手机号码，发送验证码，输入密码，重复输入密码，选择『机构』，提交数据。</listitem>
				<listitem>注册成功后自动登录APP，进入完善机构信息页面，填写机构信息同时上传资质文件，选择区块链应用领域（目前只开通了艺术品领域）</listitem>
				<listitem>提交资料后，等待管理员审批，管理员会仔细核对每项数据。如果被拒，需要鉴定师重新填写，再提交。</listitem>

			</itemizedlist>
			<para>审批通过前：机构只能看到机构信息页面</para>
			<para>审批通过后：机构拥有机构权限，机构信息，钱包，地址管理，安全，区块链属性配置，资产管理，权益持有人，评论审核，申请溯源标签</para>
			<section>
				<title>地址管理</title>
				<para>地址为收货地址，管理员会邮寄AI智能标签给机构。</para>
				<para>进入“我的” -> “设置” -> “地址管理” -> 添加地址</para>
			</section>
			<section>
				<title>申请溯源标签</title>
				<para>首先机构需要完善收货地址，至少添加一个收货地址。</para>
				<para>然后进入『申请溯源标签』，进入“我的” -> “机构” -> “申请溯源标签” 。输入数量，选择类型，选择收货地址，系统会自动计算费用，提交后从钱包中扣取。</para>
				<orderedlist>
					<title>标签有以下几种类型</title>
					<listitem>易碎纸</listitem>
					<listitem>PVC</listitem>
					<listitem>捆扎带</listitem>
					<listitem>玻璃管标签</listitem>
					<listitem>可以根据机构的需求定制AI防伪溯源标签的大小，形状等等。</listitem>
				</orderedlist>
				<para>注意：暂时只能线上申请，线下付款。待钱包功能上线后同意采用 Token 结算。提交信息后，管理员收到信息会主动联系你，完成付款后将标签邮寄给机构的收货地址。</para>
			</section>
			<section>
				<title>数字资产上链</title>
				<para>数字资产上链是将企业数字化资产上传到区块链上，相比数据库区块链是分布式共识，可以防止信息篡改。</para>
				<itemizedlist>
					<title>准备工作</title>
					<listitem>检查你的App是否是最新版本</listitem>
					<listitem>链接WiFI活4G（需要信号稳定）</listitem>
					<listitem>开启手机或者设备的NFC功能，GPS定位功能，授权摄像头，指纹认证</listitem>
					<listitem>准备好物品信息</listitem>
					<listitem>将溯源标签粘贴到艺术品上</listitem>
					<listitem>信息录入可以使用蓝牙键盘链接手机或者管理员指定专用设备上，以便加快信息录入</listitem>
					<listitem>有些输入可以提供语音输入，或者扫码录入。</listitem>
				</itemizedlist>
				<itemizedlist>
					<title>资产录入</title>
					<listitem>录入物品信息，下一步</listitem>
					<listitem>上传多媒体资料，例如图片，视频，声音等等</listitem>
					<listitem>如果物品有历史事件资料，可以追加这些信息到历史记录中。</listitem>
					<listitem>绑定AI只能溯源防伪标签</listitem>
					<listitem>绑定二维码，方便作品调出</listitem>
					<listitem>设置定位信息 （可选）</listitem>
					<listitem>指定一个或多个鉴定师鉴定物品。</listitem>
					<listitem>指定权益持有人（暂时不可用，权益持有人来自用户端）</listitem>
					<listitem>鉴定师鉴定物品，输入鉴定结果。</listitem>
					<listitem>机构提交信息。</listitem>
					<listitem>管理员审批</listitem>
					<listitem>资产上链。</listitem>
				</itemizedlist>
				<para>经过上面几个步骤完成数字资产上链。</para>
				<para>注意：管理员没有审批前可以修改资产信息，管理员审批后链上数据无法修改。</para>
			</section>
			<section>
				<title>机构成员管理</title>
				<para>在整个区块链溯源防伪的过程中，上链的工作量是最大的，所以非一人所为，必须团队完成。
			机构可以添加自己的员工，为员工分配令牌，通过令牌登录后可以一同完成资产上链的数据录入。</para>
			</section>
			<section>
				<title>资产审核</title>
				<para>分支机构可以对员工添加的资产信息逐一核对，核对后点击『提交』按钮，信息将提交至管理员。待管理员在此审批通过，数据便会上链。</para>
				<para>无论是机构拒绝还是管理员拒绝，信息都需要重新填写。</para>
				<para>信息的审核责任主要在机构，管理员审核通常是看物品是否符合国家法律，法规，政策等等方面。</para>
			</section>
			<section>
				<title>鉴定师隶属于机构</title>
				<para>当鉴定师为机构鉴定物品后即成为该机构的鉴定师，机构可以查看的机构名下的鉴定师，可以理解为鉴定师挂靠该机构，该机构负责管理鉴定师。</para>
				<para>鉴定师负责物品鉴定，并给出鉴定结论。一个物品可以有多名鉴定师同时鉴定。</para>
				<para>用户也可以邀请鉴定师鉴定某肩艺术品。</para>
			</section>
			<section>
				<title>评论</title>
				<para>用户（用户端）可以评论上链的数字资产，增加用户与机构，用户与用于的互动粘合。</para>
				<para>防止用户随意提交无意义的信息，所以机构需要审核每一条评论信息。</para>
			</section>
			<section>
				<title>安全</title>
				<screen>
				<![CDATA[
			开启指纹

			开启指纹后，添加物品，审批，等等需要确认的地方都需要指纹验证。

			注意：暂未开发改功能

			艺术品跟踪


			当发现查询作品的GPS坐标与作品所在位置的GPS坐标不在安全范围时，发送报警信息您的艺术品可能被盗，请尽快核实，如需协助，我方可以向公安机关提供：
			1. 你的物品所在位置。
			2. 以及查询者的身份信息。

			注意：暂未开发改功能

			令牌管理

			为员工指派令牌，机构注册的账号，只能登录一部设备，如果需要多人录入资产信息，就需要使用令牌登录。

			管理员会收取一部分费用（Token）


			注意：暂未开发改功能				
				]]>
				</screen>
			</section>

		</section>
		<section>
			<title>钱包</title>
			<!-- 
			什么是 Token?

			Token 是一种资产通证，钱包的功能是充值 Token，消费 Token，查看消费记录。

			用户可以从交易所，场外交易，等渠道获得 Token

			Token 同时也是用户的权益资产，用户可以在交易所交易 Token。
			
			 -->
		</section>
	</section>
</section>


