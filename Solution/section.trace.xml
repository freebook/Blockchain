<?xml version="1.0" encoding="UTF-8"?>
<section id="trace">
	<title>防伪溯源区块链应用场景</title>
	<subtitle>食品安全溯源</subtitle>
	<para>下面的方案，同样适合药品安全溯源</para>
	<section>
		<title>背景</title>
		<para>需求是通过区块链跟踪产品，实现产品产地，生产，流通等环节溯源。</para>
		<para>需求归纳，需要实现下面几点：</para>
		<para>产品具备通用的属性，例如名称，价格，重量，颜色，体积等等</para>
		<para>生产销售链条跟踪</para>
		<para>涉及环节，农产品的供应链是一个非常复杂的过程，涉及多方，农业局、卫生局、药监局、工商局、环保局等多个部门交织其中。</para>
		<para>参与者角色，我们为每个环节的参与者分配一个以太坊账号，例如每个供应商一个账号，每个代理商一个账号。这样任何一方经手后都会使用自己的账号想合约中添加数据。</para>
	</section>
	<section>
		<title>安全问题</title>
		<para>我将安全划分为六层，分别是：</para>
		<screen>
		<![CDATA[
	+----------+-----------------------------+
	| 实体层    | 物                          |
	+----------+-----------------------------+
	| 用户层    | 人                          |
	+----------+-----------------------------+
	| 网络层    | 网络                         |
	+----------+-----------------------------+
	| 应用层    | 操作系统，应用服务器           |
	+----------+-----------------------------+
	| 业务逻辑层 | 功能，业务逻辑                |
	+----------+-----------------------------+
	| 存储层    | 物理存储，硬盘                |
	+----------+-----------------------------+
		]]>
		</screen>
		<para>并不是实施了区块链技术就安全无忧了，安全分为很多层，区块链只能做到网络层和存储层的安全。区块链无法解决用户层，应用层，逻辑层等安全问题，他只能保证存储在硬盘上的区块不被修改。</para>
		<para>因为区块链仅仅能解决数据存储层的安全问题，不能保证上链的数据是真实的，上链前绝对不会被篡改；所以仅仅朔源，不考虑防伪是没有意义的，防伪仍然是重中之重。</para>
	</section>
	<section>
		<title>防伪问题</title>
		<para>如何做防伪呢，这个领域很多公司已经探索多年，各种高科技应用，武装到牙齿，但仍没有解决假货问题。</para>
		<para>区块链的出现很可能是一个突破，我们只需将现有成熟的防伪技术与区块链结合即可。</para>
		<para>现在流行的访问技术太多了，我倾向于采用二维码技术，二维码与互联网紧密相连。</para>
	</section>
	<section>
		<title>性能问题</title>
		<para>区块链目前的底层只适合做，低频高价值的业务。</para>
		<para>区块链的读取性能通常是没有问题的，但是区块链的写入实际上无论你用多少个服务器节点都不能提升，因为写入区块需要做共识算法，这步操作，会在所有节点上进行，同时还需要加密运算，这些操作都是 CPU 密集型操作。所以写入操作是存在瓶颈的。</para>
		<para>解决这个问题，我想出了几种方案：</para>
		<itemizedlist>
			<title>性能解决方案</title>
			<listitem>
				<para>通过消息队列技术异步写入，将需要写入的区块放入队列，异步完成上链操作。</para>
			</listitem>
			<listitem>
				<para>并行写入，我们可以建设多个区块链平台。多个平台同时服务于业务。</para>
			</listitem>
		</itemizedlist>
		<para>为了达到去中心化并行写入，我们将在客户端通过算法，匹配服务器。而不是在两个平台前面增加负载均衡。因为这样又回到了中心化系统。</para>
	</section>
	<section>
		<title>颗粒度问题</title>
		<para>朔源的颗粒度问题，例如“红酒”的溯源，我们是将单位溯源做到箱呢？还是打，或是瓶呢？</para>
		<para>我们用“四象限法则”分析</para>
		<screen>
		<![CDATA[
                       高价值
                   o     |
                         |    o
                         |
    低频率  --------------+-------------  高频率 操作频率
                         |
            o            |	o	
                         |
                       低价值		
                        
                      物品价值   
		]]>
		</screen>
		<para>通过观察上面图，我们可以看到可以有四种情况，低频低价值，低频高价值，高频高价值，高频低价值</para>
		<para>我认为对于低频高价值和高频高价值的业务，尽量做到最小颗粒度。</para>
		<para>而对于低频低价值和高频低价值的业务，可以颗粒度更粗。</para>
		<para></para>
	</section>
	<section>
		<title>存储规划</title>
		<para>如果是高频低价值的业务，那么溯源数据源源将会不断的被添加到区块，以此同时区块的访问率极低。迟早会达到一个临界值。</para>
		<para>所以你要规划存储，例如溯源数据的过期时间，对于 hyperledger 可以使用 DelState(key) 删除历史数据。</para>
		<para>如果是高频高价值的业务是否要考虑永久保留数据呢？</para>
		<para>这些问题都是需要考虑的。因为目前我们还不知道区块链的存储临界值。</para>
	</section>
	<section>
		<title>大数据问题</title>
		<para>区块链替代不了数据库，它与数据库是互补关系。</para>
		<para>对于低频的业务，通常传统数据库足以应付。那么对于高频操作的业务呢？暂时可能没有问题，但总有一天会遇到瓶颈。</para>
		<para>综上所述，溯源项目数据库规划决不能少。同时还要考虑数据仓库和后期数据挖掘。因为用户使用微信或者我们的APP扫描二维码，我们可以获得很多有价值的数据。</para>
		<para>手上没有 Vision 使用文本简单的绘制了一幅图</para>
		<screen>
		<![CDATA[
                             +------------------------+
                             |    User -> QR Code     |
                             +------------------------+
                                 |              |    
                                 V              V
+---------------+    +---------------+    +---------------+
| Search Engine |<-- | Microservice  |    |  Microservice |
+---------------+    +---------------+    +---------------+
                           |                     |
         +----------------------------------+    |
         |                 |                |    |
         V                 V                V    V
    +----------+     +------------+    +-------------+ 
    | Database |     | Big Data   |    | Blockchain  |
    +----------+     +------------+    +-------------+
    | MySQL    |     | Hadoop     |    | Hyperledger |
    | NoSQL    |     | Hive/Hbase |    | Chaincode   |
    +----------+     +------------+    +-------------+	
         |   |                ^               ^
         |   +------ ETL -----|               |
         |                                    |
         +----------- Message Queue ----------o		
		]]>
		</screen>
		<para>区块链之外的很多复杂的需求我们需要借助大数据系统和搜索技术。</para>
		<para>区块链的弱点是无法做复杂的查询，这里我们会用到搜索引擎技术解决，实际上搜索引擎角色是给区块链做索引。</para>
		<para>上图数据写入时，保存了四份，分别在搜索引擎，关系型数据库，数据仓库和区块的</para>
		<para>具体怎么实现，有很多方式，这里就不讨论了，否则就跑题了。</para>
	</section>
	<section id="bi">
		<title>BI商业智能</title>
		<para>数据采集，大数据分析</para>
		<para>溯源信息的查询是通过用户手机终端实现，有几种途径，微信扫二维码，APP扫二维码，微信小程序等等。</para>
		<para>扫码的同时还可以收集用户数据，我们可以收集到很多有价值的数据，例如地理位置，手机号码，性别，年龄等等......</para>
		<para>有了这些数据便可以挖掘出有价值的数据，甚至可以将数据提供给生产企业作参考。</para>
		<para>传统销售数据只能跟踪到地域，也就是统计出地域销量，没法监控到最后一公里的数据，而我们主要是采集商品最后一公里的数据。</para>
		<para>我们能做到用户消费后，呼叫中心立即跟进回访，还能在用户快用完商品是向用户推送促销信息，以及客服二次跟进。</para>
		<orderedlist>
			<title>大数据能做什么？</title>
			<listitem>
				<para>用户行为分析，用户的喜好，这些数据能为后面精准推送提供支持。</para>
			</listitem>
			<listitem>
				<para>消费与地理分析的关系</para>
			</listitem>
			<listitem>
				<para>年龄段与购买力的关系</para>
			</listitem>
			<listitem>
				<para>区域产品的存量，例如：用户扫描了一次二维码，可能用户就已经使用了改产品。我们就知道该地区投放的1000件商品被消耗了意见。</para>
			</listitem>
			<listitem>
				<para>性别与消费习惯</para>
			</listitem>
			<listitem>
				<para>两次间隔消费时间</para>
			</listitem>
			<listitem>
				<para>活跃用户和沉睡用户</para>
			</listitem>
		</orderedlist>
	</section>
	<section>
		<title>采集终端</title>
		<para>溯源数据怎么录入呢？例如我们开发一个设备，二维码扫描枪，内置安卓系统。</para>
		<para>我们不清楚他们的教育背景以及学习能力，所以设计原则是尽量傻瓜化，降低数据录入难度和学习难度，终端开机后互动教学，走一遍流程即可上手。</para>
		<para>首先将溯源环节的每个节点通过后台事先写入数据库，接下来通过GIS地理信息系统匹配。</para>
		<screen>
		<![CDATA[
		
UUID -> 二维码 -> 设备扫描二维码激活-> 入数据库 -> 异步消息队列 -> 上链 > ---+
                       ^                                             |
                       |                                             |
                       +------------------- 追加数据 -----------------+ 
		]]>
		</screen>
		<para>终端会帮助用户欲录入信息，用户可以在信息基础上修改或者重写。同时终端支持图片，图像记录上传。</para>
		<para>对于图片还能实现 EXIF 数据保存，包括图片描述信息，地理信息等等......</para>
	</section>
	<section>
		<title>多媒体数据</title>
		<para>这里我们需要考虑是否需要记录多媒体数据，这里的多媒体指图像，声音，甚至3D扫描数据等等......</para>
		<para>对于图片、音频与视频，我们可以将它集成到采集终端上，然后异步上传到去中心化的分布式文件系统中。</para>
		<para>去中心化的分布式文件系统能实现，一张图片一个hash值，通过hash值访问图片，图片被同步到相邻节点实现去中心化，图片被修改hash值随之变化数据便无效。</para>
	</section>
	<section>
		<title>物流接口</title>
		<para>使用物流单好通过物流公司提供的借口获得物流数据，然后写入到区块。</para>
	</section>
	<section>
		<title>如何激励用户</title>
		<para>防伪技术做了，区块链溯源也做了，那么对于用户来说，他可能懒得去扫你的二维码，怎么办呢？</para>
		<para>这里需要激励用户，怎样激励用户，我的方案是送代币。</para>
		<para>首先代币不仅能够购买物品，还能交易，流通，形成一个小的商业闭环。其次目前代币已经泛滥 99% 可能是空气币，这里我们需要将代币的价值与物品对价，类似金本位/银本位。</para>
		<para>怎样操作呢？例如一个代币等于一斤水果，无论代币怎样炒作，最终用户不想玩下去了，就来换水果，也可以是大米，食用油等等...</para>
		<para>
			关于怎样使用代币来做积分系统请参考我的另一篇文章
			<ulink url="https://cloud.tencent.com/developer/article/1057118">《使用代币替代传统积分系统》</ulink>
			，你可以在搜索引擎中找到
		</para>
		<para>根据业务需要，可以发行布置一套币，例如水果币，流量币，话费币，每种币的功能不同，这些币可以在交易所中撮合交易，例如卖出水果币，换成流量币等等。</para>
		<para>由于国家的法规问题，代币系统设计原则一定是代币只能用来购买商城中的物品，不能直接兑换成RMB，否则会触碰到国家的红线。但是通过交易所，币币之间兑换我们就控制不了了。</para>
		<para>另外扫描二维码显示溯源防伪信息的同时我们有很多可以操作空间，可以获取用户地理位置，手机号码等等信息，为后面大数据分析埋点。</para>
		<orderedlist>
			<title>用户激励手段</title>
			<listitem>
				<para>分享激励</para>
			</listitem>
			<listitem>
				<para>好评激励</para>
			</listitem>
			<listitem>
				<para>用户等级激励</para>
			</listitem>
			<listitem>
				<para>代币激励</para>
			</listitem>
			<listitem>
				<para>用户排名，PK排行榜</para>
			</listitem>
			<listitem>
				<para>成就勋章</para>
			</listitem>
			<listitem>
				<para>身份标签，黄马甲：）</para>
			</listitem>
		</orderedlist>
		<para>等等，手段众多，目的是让用户查询溯源信息，手机用户数据，鼓励代币消费等等.......</para>
	</section>
	<section>
		<title>上链</title>
		<para>并不是所有数据都上链，哪些数据上链呢？</para>
		<para>产地(出生、生长)、采购、加工(检疫、屠宰)、库存、运输、销售、配送等等......</para>
	</section>
	<section>
		<title>以太坊解决方案</title>
		<para>我们设计一个简单的合约，模拟上面提到的解决方案</para>
		<programlisting>
		<![CDATA[
pragma solidity ^0.4.20;

contract Trace {

    enum State { Origin, Factory, QA, Shipping, Received, Pending }
    
    string name;
    uint price;
    uint weight;
    bool lock = false;	//合约锁
    bool close = false;	//合约状态
    uint number = 1;
    uint attr_number = 1;
    
    mapping (address  => string) guestbook; //客户留言本	

	struct Attribute {
	    address owner;	// 供应商
        string name;		// 属性的名字
        string date;    	// 生产日期
        string desc;		// 描述信息
        
    }
    mapping (uint  => Attribute) attribute;

    struct Logistics {
        address owner;	// 中转站
        string date;    // 转运日期
        State status;   // 状态
        string message; // 留言信息
    }
    mapping (uint  => Logistics) stations;
    
    function Trace(string _name, uint _price, uint _weight) public {
        name = _name;
        price = _price;
        weight = _weight;
	}
    // 名称
    function getName() public view returns(string){
        return name;
    }
    // 价格
    function getPrice() public view returns(uint){
        return price;
    }
    // 重量
    function getWeight() public view returns(uint){
        return weight;
    }
    
     // 增加商品属性
    function putAttribute(address _owner,string _name, string _date, string _desc ) public{
        if(lock == false){
        		Attribute memory item = Attribute(_owner, _name,_date,_desc);
        		attribute[attr_number] = item;
        		attr_number = attr_number + 1;
        }
    }

	// 获得属性
    function getAttribute(uint _attr_number) public view returns(address, string, string, string) {
        require(_attr_number < attr_number);
        Attribute memory item = attribute[_attr_number];
        
		return (item.owner, item.name, item.date, item.desc);
	}
    
    // 增加物流中转信息
    function putLogistics(address _owner,string _date, State _status, string _message ) public{
        if(close == false){
            Logistics memory node = Logistics(_owner,_date,_status,_message);
            stations[number] = node;
            number = number + 1;
            lock = true;
        }
        if (_status == State.Received) {
            close = true;
        }
    }

	// 获得中转信息
    function getLogistics(uint _number) public view returns(address, string, State, string) {
        require(_number < number);

        Logistics memory node = stations[_number];
        
		return (node.owner, node.date, node.status, node.message);
	}
	
	// 或者转中站数量
	function getLogisticsCount() public view returns(uint){
	    return number;
	}
    
    // 客户留言
    	function addGuestbook(address _owner, string message) public{
	    guestbook[_owner] = message;
	}
}
		]]>
		</programlisting>
		<para>怎样使用这个合约呢？合约部署，需要输入三个参数，分别是名称，价格和装量</para>
		<programlisting>
		<![CDATA[
Trace(string _name, uint _price, uint _weight) 	
		]]>
		</programlisting>
		<para>产品属性可以在出厂前设置，一旦出厂进入物流阶段就不允许在更改了。</para>
		<section>
			<title>应用场景一</title>
			<para>调用合约案例一，这是没有经过深加工的原产品案例。例如 Trace("山羊肉", 25, 50) </para>
			<programlisting>
		<![CDATA[
var contract;
Trace.deployed().then(function(instance){contract=instance;});
contract.getName();
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","颜色", "", "黑色")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","产地", "", "内蒙古")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","出生", "2017-01-12", "XXX牧场")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","宰杀", "2018-02-12", "XXX宰杀")

contract.putLogistics("0x627306090abab3a6e1400e9345bc60c78a8bef57","2018-02-20",0,"XXX牧场");
contract.putLogistics("0x627306090abab3a6e1400e9345bc60c78a8bef57","2018-02-20",1,"XXX屠宰公司");
contract.putLogistics("0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef","2018-02-22",2,"XXX检验检疫");
contract.putLogistics("0xf17f52151ebef6c7334fad080c5704d77216b732","2018-02-21",3,"XXX一级经销商");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-23",3,"XXX二级经销商");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-24",3,"XXX批发中心");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-25",3,"XXX超市");
contract.putLogistics("0x0d1d4e623d10f9fba5db95830f7d3839406c6af2","2018-02-26",4,"用户包裹收到");

contract.getNode(); // 获得物流经过的转运站数量		
		]]>
			</programlisting>
		</section>
		<section>
			<title>应用场景二</title>
			<para>调用合约案例二，这是深加工的产品案例。例如 Trace("牦牛肉干", 80, 500) </para>
			<programlisting>
		<![CDATA[
var contract;
Trace.deployed().then(function(instance){contract=instance;});
contract.getName();
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","调和油", "2016-10-10", "银龙鱼牌")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","辣椒粉", "2016-10-30", "西藏XXX公司生产")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","生抽", "2016-01-12", "XXX生抽，XXX生产")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","山梨酸钾", "2017-02-12", "XXX生产")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","防腐剂", "2017-02-12", "XXX生产")
contract.putAttribute("0x627306090abab3a6e1400e9345bc60c78a8bef57","牦牛肉", "2017-02-12", "XXX牧场")

contract.putLogistics("0x627306090abab3a6e1400e9345bc60c78a8bef57","2018-02-20",0,"XXX牧场");
contract.putLogistics("0x627306090abab3a6e1400e9345bc60c78a8bef57","2018-02-20",1,"XXX公司生产");
contract.putLogistics("0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef","2018-02-22",2,"XXX通过QA、QC");
contract.putLogistics("0xf17f52151ebef6c7334fad080c5704d77216b732","2018-02-21",3,"XXX一级经销商");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-23",3,"XXX二级经销商");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-24",3,"XXX批发中心");
contract.putLogistics("0x821aea9a577a9b44299b9c15c88cf3087f3b5544","2018-02-25",3,"XXX超市");
contract.putLogistics("0x0d1d4e623d10f9fba5db95830f7d3839406c6af2","2018-02-26",4,"用户包裹收到");

contract.getNode(); // 获得物流经过的转运站数量		
		]]>
			</programlisting>
		</section>
		<section>
			<title>用户留言</title>
			<programlisting>
		<![CDATA[
contract.addGuestbook("0x0d1d423e623d10f9d10f9d10f9d10f9d10f9fba5","东西好吃，下次还买，给好评");
		]]>
			</programlisting>
		</section>
	</section>
	<section>
		<title>Hyperledger 解决方案</title>
		<para>由于家里在刷墙，服务器收起来了，没有开发环境，只能提供部分参考代码，无法提供合约完整代码，只是给大家一个思路，原理很上面以太坊的合约类似。</para>
		<section id="hyperledger.source">
			<title>溯源合约涉及</title>
			<screen>
		<![CDATA[
package main

import "fmt"
import "encoding/json"

const (
	Origin = iota 	// 0
	Factory        	// 1
	QA       		// 2
	Shipping		// 3
	Received		// 4
	Pending			// 5
	Supermarket		// 6
)

type structElement struct {
	Name string `json:"name"`
	Company string `json:"company"`
	Description string `json:"description"`
}

type structLogistics struct {
    Stations string `json:"stations"`	// 中转站
	Date	string  `json:"date"`  // 转运日期
	Status	uint8	`json:"status"`  // 状态
    Message    string `json:"message"` // 留言信息
}

type Trace struct {
	Name string	`json:"name"`
	Address string	`json:"address"`
	Attribute	map[string]string 	`json:"attribute"`
	Element		[]structElement		`json:"element"`
	Logistics	map[string]structLogistics	`json:"logistics"`
}

func (trace *Trace) setName(_name string) {
    trace.Name = _name
}

func (trace *Trace) getName() string {
    return trace.Name
}

func (trace *Trace) putAttribute(_key string, _value string) {
    trace.Attribute[_key] = _value
}

func (trace *Trace) putLogistics(_key string, _value structLogistics) {
    trace.Logistics[_key] = _value
}

func main(){
	
	trace := &Trace{
		Name: "牦牛肉干",
		Address: "内蒙古呼和浩特",
		Attribute: map[string]string{},
		Element: []structElement{structElement{Name:"塑料袋",Company: "XXX塑料制品有限公司", Description: "外包装"},structElement{Name:"辣椒粉",Company: "XXX调味品有限公司", Description: "采摘年份2016-10-10"},structElement{Name:"调和油",Company: "XXX调味品有限公司", Description: "生产日期2016-10-10"}},
		Logistics: map[string]structLogistics{}}
	
	trace.putAttribute("Color","Red")
	trace.putAttribute("Size","10")
	trace.putAttribute("Weight","100kg")
	
	trace.putLogistics("1", structLogistics{"呼和浩特","2016-10-15", Origin, "牦牛收购"})
	trace.putLogistics("2", structLogistics{"呼和浩特","2016-10-18", Factory, "牦牛宰杀"})
	trace.putLogistics("3", structLogistics{"呼和浩特","2016-10-15", QA, "经过质检"})
	trace.putLogistics("4", structLogistics{"北京市","2016-10-15", Shipping, "运输中"})
	trace.putLogistics("5", structLogistics{"杭州市","2016-10-15", Shipping, "XXX冷库"})
	trace.putLogistics("5", structLogistics{"深圳市","2016-10-15", Supermarket, "XXX超市"})
	trace.putLogistics("5", structLogistics{"龙华区","2016-10-15", Received, "用户签收"})
	

	traceJson, _ := json.Marshal(trace)
	fmt.Println(string(traceJson))

}
		]]>
			</screen>
			<section id="">
				<title>食品安全朔源</title>
				<programlisting>
				<![CDATA[
	trace := &Trace{
		Name: "牦牛肉干",
		Address: "内蒙古呼和浩特",
		Attribute: map[string]string{},
		Element: []structElement{structElement{Name:"塑料袋",Company: "XXX塑料制品有限公司", Description: "外包装"},structElement{Name:"辣椒粉",Company: "XXX调味品有限公司", Description: "采摘年份2016-10-10"},structElement{Name:"调和油",Company: "XXX调味品有限公司", Description: "生产日期2016-10-10"}},
		Logistics: map[string]structLogistics{}}
	
	trace.putAttribute("Color","Red")
	trace.putAttribute("Size","10")
	trace.putAttribute("Weight","100kg")
	
	trace.putLogistics("1", structLogistics{"呼和浩特","2016-10-15", Origin, "牦牛收购"})
	trace.putLogistics("2", structLogistics{"呼和浩特","2016-10-18", Factory, "牦牛宰杀"})
	trace.putLogistics("3", structLogistics{"呼和浩特","2016-10-15", QA, "经过质检"})
	trace.putLogistics("4", structLogistics{"北京市","2016-10-15", Shipping, "运输中"})
	trace.putLogistics("5", structLogistics{"杭州市","2016-10-15", Shipping, "XXX冷库"})
	trace.putLogistics("5", structLogistics{"深圳市","2016-10-15", Supermarket, "XXX超市"})
	trace.putLogistics("5", structLogistics{"龙华区","2016-10-15", Received, "用户签收"})				
				]]>
				</programlisting>
			</section>
			<section id="">
				<title>水平移植</title>
				<para>这个方案可以水平移植到其他领域，例如 药品安全溯源</para>
				<programlisting>
				<![CDATA[
	trace := &Trace{
		Name: "强身大力丸",
		Address: "深圳是XXX制药有限公司",
		Attribute: map[string]string{},
		Element: []structElement{
			structElement{Name:"枸杞",Company: "宁夏XXX农业有限公司", Description: "采摘年份2016-10-10，10g"},
			structElement{Name:"茯苓",Company: "河南XXX农业有限公司", Description: "采摘年份2016-10-10，20kg"},
			structElement{Name:"XXX",Company: "XXX有限公司", Description: "生产日期2016-10-10"},
			structElement{Name:"XXX",Company: "XXX有限公司", Description: "生产日期2016-10-10"},
			...
			...
			structElement{Name:"塑料包装",Company: "XXX有限公司", Description: "生产日期2016-10-10"}，
			structElement{Name:"包装盒",Company: "XXX有限公司", Description: "生产日期2016-10-10"}
			},
		Logistics: map[string]structLogistics{}}
	
	trace.putAttribute("Color","Red")
	trace.putAttribute("Size","10")
	...
	...
	trace.putAttribute("Weight","100kg")
	
	trace.putLogistics("1", structLogistics{"呼和浩特","2016-10-15", Origin, "原材料...."})
	trace.putLogistics("2", structLogistics{"呼和浩特","2016-10-18", Factory, "生产...."})
	trace.putLogistics("3", structLogistics{"呼和浩特","2016-10-15", QA, "经过质检"})
	trace.putLogistics("3", structLogistics{"XXX市药品监督局","2016-10-15", QA, "经过质检"})
	trace.putLogistics("4", structLogistics{"北京市","2016-10-15", Shipping, "运输中"})
	trace.putLogistics("5", structLogistics{"杭州市","2016-10-15", Shipping, "XXX冷库"})
	trace.putLogistics("5", structLogistics{"深圳市","2016-10-15", Supermarket, "XXX超市"})
	trace.putLogistics("5", structLogistics{"龙华区","2016-10-15", Received, "用户签收"})				
				]]>
				</programlisting>
				<para>合约落地，还需要做一些调整已适应实际场景。但基本思路是通的。</para>
			</section>
		</section>

		<section id="hyperledger.token">
			<title>积分通正（代币）</title>
			<para>我发现用以太坊思维，将以太坊代币合约搬到 hyperledger 上，一样可以实现代币的功能，这个代币除了不能上交易所，基本满足我们替代积分系统的需求，下面是我写了这样一个合约，在超级账本上实现类似以太坊的代币转账功能。</para>
			<screen>
			<![CDATA[
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	sc "github.com/hyperledger/fabric/protos/peer"
)

// Define the Smart Contract structure
type SmartContract struct {
}

type Token struct {
	Owner			string	`json:"Owner"`
	TotalSupply 	uint	`json:"TotalSupply"`
	TokenName 		string	`json:"TokenName"`
	TokenSymbol 	string	`json:"TokenSymbol"`
	BalanceOf		map[string]uint	`json:"BalanceOf"`
}

func (token *Token) initialSupply(){
	token.BalanceOf[token.Owner] = token.TotalSupply;
}

func (token *Token) transfer (_from string, _to string, _value uint){
	if(token.BalanceOf[_from] >= _value){
		token.BalanceOf[_from] -= _value;
		token.BalanceOf[_to] += _value;
	}
}

func (token *Token) balance (_from string) uint{
	return token.BalanceOf[_from]
}

func (token *Token) burn(_value uint) {
	if(token.BalanceOf[token.Owner] >= _value){
		token.BalanceOf[token.Owner] -= _value;
		token.TotalSupply -= _value;
	}
}

func (token *Token) burnFrom(_from string, _value uint) {
	if(token.BalanceOf[_from] >= _value){
		token.BalanceOf[_from] -= _value;
		token.TotalSupply -= _value;
	}
}

func (token *Token) mint(_value uint) {
	
	token.BalanceOf[token.Owner] += _value;
	token.TotalSupply += _value;
	
}

func (s *SmartContract) Init(stub shim.ChaincodeStubInterface) sc.Response {
	return shim.Success(nil)
}

func (s *SmartContract) initLedger(stub shim.ChaincodeStubInterface) sc.Response {
	
	token := &Token{
		Owner: "netkiller",
		TotalSupply: 10000,
		TokenName: "代币通正",
		TokenSymbol: "COIN",
		BalanceOf: map[string]uint{}}
	
	token.initialSupply()

	tokenAsBytes, _ := json.Marshal(token)
	stub.PutState("Token", tokenAsBytes)
	fmt.Println("Added", tokenAsBytes)
	
	return shim.Success(nil)
}

func (s *SmartContract) transferToken(stub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 3 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	tokenAsBytes, _ := stub.GetState(args[0])
	token := Token{}

	json.Unmarshal(tokenAsBytes, &token)
	token.transfer(args[1],args[2],args[3])

	tokenAsBytes, _ = json.Marshal(token)
	stub.PutState(args[0], tokenAsBytes)

	return shim.Success(nil)
}

func (s *SmartContract) balanceToken(stub shim.ChaincodeStubInterface, args []string) sc.Response {

	if len(args) != 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	tokenAsBytes, _ := stub.GetState(args[0])
	token := Token{}

	json.Unmarshal(tokenAsBytes, &token)
	amount := token.balance(args[1])

	return shim.Success(amount)
}

func (s *SmartContract) Invoke(stub shim.ChaincodeStubInterface) sc.Response {

	// Retrieve the requested Smart Contract function and arguments
	function, args := stub.GetFunctionAndParameters()
	// Route to the appropriate handler function to interact with the ledger appropriately
	if function == "balanceToken" {
		return s.balanceToken(stub, args)
	} else if function == "initLedger" {
		return s.initLedger(stub)
	} else if function == "transferToken" {
		return s.transferToken(stub, args)
	}

	return shim.Error("Invalid Smart Contract function name.")
}

// The main function is only relevant in unit test mode. Only included here for completeness.
func main() {

	// Create a new Smart Contract
	err := shim.Start(new(SmartContract))
	if err != nil {
		fmt.Printf("Error creating new Smart Contract: %s", err)
	}
}

			]]>
			</screen>
			<para>合约代码的测试</para>
			<screen>
			<![CDATA[
func main(){
	
	token := &Token{
		Owner: "netkiller",		// 代币管理者
		TotalSupply: 10000,		// 代币发行总量
		TokenName: "积分连",		// 代币名称
		TokenSymbol: "NEO",		// 代币符号 NEO
		BalanceOf: map[string]uint{}}
	
	token.initialSupply()		// 初始化代币
	
	fmt.Println(token.balance("netkiller"))	// 查询余额

	token.transfer("netkiller","neo", 100)	// 转账，这里账号使用用户ID，没有使用以太坊钱包那样的哈希值，因为哈希值不便于记忆。

	fmt.Println(token.balance("netkiller"))
	fmt.Println(token.balance("neo"))

}
			]]>
			</screen>
			<para>我们可以建立很多套这样的比，例如水果币，蔬菜币，流量币...</para>
			<para>开发一个小型交易所难度也不大，让用户在交易所中交易这些币。</para>
		</section>
	</section>
</section>
<!-- 扫码返点激励，填写手机号后CC立即回访 -->