<?xml version="1.0" encoding="UTF-8"?>

	&chapter.ethereum.devel.node.xml;
	&chapter.ethereum.devel.java.xml;

<chapter id="web3.py">
	<title>web3.py - A python interface for interacting with the Ethereum
		blockchain and ecosystem.
	</title>
	<para>
		文档地址
		<ulink url="http://web3py.readthedocs.io/">http://web3py.readthedocs.io/</ulink>
	</para>
	<section id="web3.py.install">
		<title>安装 web3.py 开发环境</title>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/web3.py % pip3 install web3
		]]>
		</screen>
	</section>
	<section >
		<title>连接到以太坊节点</title>
		<section >
			<title>HTTP</title>
			<programlisting>
			<![CDATA[
>>> from web3 import Web3
>>> web3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545")
			]]>
			</programlisting>
		</section>
		<section >
			<title>IPC</title>
			<programlisting>
			<![CDATA[
>>> from web3 import Web3
>>> web3 = Web3(Web3.IPCProvider("~/Library/Ethereum/geth.ipc"))	
			]]>
			</programlisting>
		</section>
		<section >
			<title>Websocket</title>
			<programlisting>
			<![CDATA[
>>> from web3 import Web3
>>> web3 = Web3(Web3.WebsocketProvider("ws://127.0.0.1:8546")			
			]]>
			</programlisting>
		</section>

	</section>
	<section id="web3.py.sendTransaction">
		<title>交易</title>
		<section >
			<title>发送 ETH</title>
			<programlisting>
			<![CDATA[
from web3 import Web3
web3 = Web3(Web3.IPCProvider("~/Library/Ethereum/geth.ipc"))	

fromAddress = '0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA'
toAddress = '0x997e5CA600E19447D0B82aFBf9c7F00De2B39B16'
value = 0.0001

web3.personal.unlockAccount(fromAddress, '12345678')
web3.eth.sendTransaction({'to': toAddress, 'from': fromAddress, 'value': value})
			]]>
			</programlisting>
		</section>
		<section >
			<title>签名发送 ETH</title>
			<programlisting>
			<![CDATA[
from web3 import Web3
web3 = Web3(Web3.HTTPProvider("https://ropsten.infura.io/CsS9shwaAab0z7B4LP2d"))	

privateKey = '8D16063C3F665A6FB37195D18968E63CC04CEE4BFB1B98C184121D4C31D9875E'
fromAddress = "0xb3cedc76e75fcd278c988b22963c2f35c99c10b7"
toAddress = '0x997e5CA600E19447D0B82aFBf9c7F00De2B39B16'
amount = 0.0001

signed_txn = web3.eth.account.signTransaction(dict(
    nonce=web3.eth.getTransactionCount(fromAddress),
    gasPrice=web3.eth.gasPrice,
    gas=21000,
    to=toAddress,
    value=amount,
    data=b'',
  ),
  private_key,
)
web3.eth.sendRawTransaction(signed_txn.rawTransaction)
			]]>
			</programlisting>
		</section>
	</section>
	<section >
		<title></title>
		<programlisting>
		<![CDATA[
from web3 import Web3
web3 = Web3(Web3.HTTPProvider("https://ropsten.infura.io/CsS9shwaAab0z7B4LP2d"))	

contract = web3.eth.contract(address='0x000000000000000000000000000000000000dead', abi=...)

contract.functions.balanceOf(address).call()

contract.functions.transfer(to, value).call()
		]]>
		</programlisting>
	</section>
</chapter>
<chapter>
	<title>Ethereum iOS</title>
	<para>
		<ulink url="https://github.com/MercuryProtocol/web3.swift" />
	</para>
	<para>https://medium.com/mercuryprotocol/introducing-web3-swift-for-ethereum-ios-development-1e02212b662b</para>
</chapter>
<chapter id="index"><?dbhtml dir="api" ?>
	<title>Ethereum Developer APIs</title>
	<section>
		<title>API Keys</title>
		<para>https://etherscan.io/register</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/newaccount.png" width="" srccredit="netkiller" />
		<para>前往邮箱查看以太坊发出的确认邮件，并点击里面链接地址。</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/email.png" width="" srccredit="netkiller" />
		<para>登陆</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/login.png" width="" srccredit="netkiller" />
		<para>创建 API Key</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-create.png" width="" srccredit="netkiller" />
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-token.png" width="" srccredit="netkiller" />
		<para>创建完成</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-successfully.png" width="" srccredit="netkiller" />
	</section>
	<section>
		<title>账号</title>
		<section >
			<title>余额</title>
			<para>获得账号的余额</para>
			<screen>
			<![CDATA[
https://api.etherscan.io/api?module=account&action=balance&address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&tag=latest&apikey=JFZWPE88I3TZFZWXKVHJ32INUIYQRRINJ9
			]]>
			</screen>
		</section>
		<section >
			<title>查询区块</title>
			<screen>
			<![CDATA[
http://api.etherscan.io/api?module=account&action=txlist&address=0x3e827461Cc53ed7c75A29187CfF39629FCAE3661&startblock=0&endblock=99999999&sort=asc&apikey=RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N
			]]>
			</screen>
			<para>Spring boot 2.0.2 实现交易记录查询</para>
			<programlisting>
			<![CDATA[
package cn.netkiller.api.restful;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class TransactionsRestController {
	private static final Logger logger = LoggerFactory.getLogger(TransactionsRestController.class);

	private static final String url = "http://api.etherscan.io/api?module={module}&action={action}&address={address}&startblock={startblock}&endblock={endblock}&sort={sort}&apikey={apikey}";

	@Autowired
	public TestRestController() {
		// TODO Auto-generated constructor stub
	}

	@GetMapping("/block/{startblock}/{endblock}/{address}")
	public TransactionsResponse block(@PathVariable String startblock, @PathVariable String endblock, @PathVariable String address) {
		return this.getTransactionsByAddress(startblock, endblock, address);
	}

	private TransactionsResponse getTransactionsByAddress(String startblock, String endblock, String address) {
		Map<String, String> params = new HashMap<String, String>();
		params.put("module", "account");
		params.put("action", "txlist");
		params.put("address", address);
		params.put("startblock", startblock);
		params.put("endblock", endblock);
		params.put("sort", "asc");
		params.put("apikey", "RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N");
		RestTemplate restTemplate = new RestTemplate();
		TransactionsResponse result = restTemplate.getForObject(url, TransactionsResponse.class, params);
		logger.info(params.toString());
		logger.info(result.toString());
		return result;
	}
}

class Transactions {

	private String blockNumber;
	private String timeStamp;
	private String hash;
	private String nonce;
	private String blockHash;
	private String transactionIndex;
	private String from;
	private String to;
	private String value;
	private String gas;
	private String gasPrice;
	private String isError;
	private String txreceipt_status;
	private String input;
	private String contractAddress;
	private String cumulativeGasUsed;
	private String gasUsed;
	private String confirmations;

	public Transactions() {
	}

	public String getBlockNumber() {
		return blockNumber;
	}

	public void setBlockNumber(String blockNumber) {
		this.blockNumber = blockNumber;
	}

	public String getTimeStamp() {
		return timeStamp;
	}

	public void setTimeStamp(String timeStamp) {
		this.timeStamp = timeStamp;
	}

	public String getHash() {
		return hash;
	}

	public void setHash(String hash) {
		this.hash = hash;
	}

	public String getNonce() {
		return nonce;
	}

	public void setNonce(String nonce) {
		this.nonce = nonce;
	}

	public String getBlockHash() {
		return blockHash;
	}

	public void setBlockHash(String blockHash) {
		this.blockHash = blockHash;
	}

	public String getTransactionIndex() {
		return transactionIndex;
	}

	public void setTransactionIndex(String transactionIndex) {
		this.transactionIndex = transactionIndex;
	}

	public String getFrom() {
		return from;
	}

	public void setFrom(String from) {
		this.from = from;
	}

	public String getTo() {
		return to;
	}

	public void setTo(String to) {
		this.to = to;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}

	public String getGas() {
		return gas;
	}

	public void setGas(String gas) {
		this.gas = gas;
	}

	public String getGasPrice() {
		return gasPrice;
	}

	public void setGasPrice(String gasPrice) {
		this.gasPrice = gasPrice;
	}

	public String getIsError() {
		return isError;
	}

	public void setIsError(String isError) {
		this.isError = isError;
	}

	public String getTxreceipt_status() {
		return txreceipt_status;
	}

	public void setTxreceipt_status(String txreceipt_status) {
		this.txreceipt_status = txreceipt_status;
	}

	public String getInput() {
		return input;
	}

	public void setInput(String input) {
		this.input = input;
	}

	public String getContractAddress() {
		return contractAddress;
	}

	public void setContractAddress(String contractAddress) {
		this.contractAddress = contractAddress;
	}

	public String getCumulativeGasUsed() {
		return cumulativeGasUsed;
	}

	public void setCumulativeGasUsed(String cumulativeGasUsed) {
		this.cumulativeGasUsed = cumulativeGasUsed;
	}

	public String getGasUsed() {
		return gasUsed;
	}

	public void setGasUsed(String gasUsed) {
		this.gasUsed = gasUsed;
	}

	public String getConfirmations() {
		return confirmations;
	}

	public void setConfirmations(String confirmations) {
		this.confirmations = confirmations;
	}

	@Override
	public String toString() {
		return "Transactions [blockNumber=" + blockNumber + ", timeStamp=" + timeStamp + ", hash=" + hash + ", nonce=" + nonce + ", blockHash=" + blockHash + ", transactionIndex=" + transactionIndex + ", from=" + from + ", to=" + to + ", value=" + value + ", gas=" + gas + ", gasPrice=" + gasPrice + ", isError=" + isError + ", txreceipt_status=" + txreceipt_status + ", input=" + input + ", contractAddress=" + contractAddress + ", cumulativeGasUsed=" + cumulativeGasUsed + ", gasUsed=" + gasUsed + ", confirmations=" + confirmations + "]";
	}

}

class TransactionsResponse {
	private String status;
	private String message;
	private List<Transactions> result = new ArrayList<Transactions>();

	public TransactionsResponse() {
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public List<Transactions> getResult() {
		return result;
	}

	public void setResult(List<Transactions> result) {
		this.result = result;
	}

	@Override
	public String toString() {
		return "TransactionsResponse [status=" + status + ", message=" + message + ", result=" + result + "]";
	}

}			
			]]>
			</programlisting>
		</section>
		<section >
			<title>查询区块</title>
			<screen>
			<![CDATA[
http://api.etherscan.io/api?module=account&action=txlistinternal&address=0x3e827461Cc53ed7c75A29187CfF39629FCAE3661&startblock=0&endblock=99999999&sort=asc&apikey=RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N			
			]]>
			</screen>
		</section>
	</section>
	<section >
		<title>查询交易</title>
		<section >
			<title>检查合约执行状态</title>
			<screen>
			<![CDATA[
https://api.etherscan.io/api?module=transaction&action=getstatus&txhash=0x6cec54f03e6d9271f2c51e0696de03df4bba82171f2aff464c63554614915500&apikey=RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N
			]]>
			</screen>
		</section>
	</section>
	<section>
		<title>Geth/Parity Proxy APIs</title>
		<section id="">
			<title></title>
			<screen>
			<![CDATA[
https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
	private String getBlockNumber() {
		final String url = "https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N";
		Map<String, String> params = new HashMap<String, String>();
		params.put("module", "proxy");
		params.put("action", "eth_blockNumber");
		params.put("apikey", "RT5JW37AKEZVSW3C91Z86IGI2FF7JDPF1N");
		RestTemplate restTemplate = new RestTemplate();
		JsonRpc result = restTemplate.getForObject(url, JsonRpc.class, params);

		return Integer.valueOf(result.getResult().substring(2), 16).toString();
	}			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="ethereum.jsonrpc">
		<title>JSON RPC 原生交口调用</title>
		<para>
			JSON RPC 文档
			<ulink url="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs" />
		</para>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~ % curl -XPOST -H "Accept: application/json" -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x5c18a33df2cc41a1beddc91133b8422e89f041b7", "latest"],"id":1}' http://localhost:8545 
{"jsonrpc":"2.0","id":1,"result":"0x153e5f3aeb667075800"}		
		]]>
		</screen>
		<screen>
		<![CDATA[
curl -X POST --data '{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}'		

curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getBalance","params":["0x407d73d8a49eeb85d32cf465507dd71d507100c1", "latest"],"id":1}'
		]]>
		</screen>
	</section>

</chapter>