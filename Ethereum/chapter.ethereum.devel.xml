<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="web3" ?>
	<title>web3.js - 1.0.0</title>
	<!-- http://web3js.readthedocs.io/en/1.0/index.html -->
	<para>注意本章采用 web3.js v1.0.0 版本，这个版本仍在beta阶段，还没有 release。</para>
	<para>你看到网上很多实例，安照例子的步骤操作，发现无法成功，很可能跟版本有关。v1.0.0
		与之前的版本还是有很大差异，所以选择版本很重要。因为 v1.0.0 很快就会 release 所以本章不会在用早起版本举例。
	</para>
	<graphic format="png" fileref="../../images/ethereum/devel/devel.png" width="" srccredit="netkiller" />
	<section id="web3.js.setup">
		<title>开发环境</title>
		<screen>
		<![CDATA[
npm init
npm install web3 --save
npm install solc
		]]>
		</screen>
		<section id="">
			<title>Ropsten 测试网</title>
			<screen>
			<![CDATA[
geth --testnet --syncmode light --cache 1024 --ipcpath /Users/neo/Library/Ethereum/geth.ipc
			]]>
			</screen>
			<para>Ropsten 测试网上转账的例子</para>
			<programlisting>
			<![CDATA[
fs = require('fs');
var net = require('net');
var Web3 = require('web3');
var web3 = new Web3('/Users/neo/Library/Ethereum/geth.ipc', net);

console.log(web3.version)
const abi = fs.readFileSync('output/TokenERC20.abi', 'utf-8');

const contractAddress = "0x70682386d0dE84B1e549DC3c4305CCB2D261b2a8";
const coinbase = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7";
const toAddress = "0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA";

balanceWei = web3.eth.getBalance(coinbase);
console.log(balanceWei);

const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});

web3.eth.personal.unlockAccount(coinbase, "netkiller").then(function(result){
	console.log(result)
	contract.methods.balanceOf(coinbase).call().then(console.log).catch(console.error);
	contract.methods.balanceOf(toAddress).call().then(console.log).catch(console.error);
});


contract.methods.transfer(toAddress, 10000).send().then(function(receipt){

	console.log(receipt);

}).catch(console.error);

contract.methods.balanceOf(coinbase).call().then(console.log).catch(console.error);
contract.methods.balanceOf(toAddress).call().then(console.log).catch(console.error);			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="truffle-contract">
		<title>truffle-contract</title>
		<screen>
		<![CDATA[
neo@MacBook-Pro ~/ethereum/web3 % npm install truffle-contract		
		]]>
		</screen>
	</section>

	<section id="web3.js.connect">
		<title>连接到以太坊客户端</title>
		<section>
			<title>http 方式</title>
			<programlisting>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');
			]]>
			</programlisting>
			<para>查看连接状态</para>
			<screen>
			<![CDATA[
> web3.currentProvider
HttpProvider {
  host: 'http://localhost:8545',
  timeout: 0,
  connected: true,
  headers: undefined }			
			]]>
			</screen>
			<para>connected: true 表示连接成功。</para>
		</section>
		<section id="websocket">
			<title>WebSocket 方式</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3(Web3.givenProvider || 'ws://remotenode.com:8546');
			]]>
			</screen>
		</section>
		<section id="ipc">
			<title>IPC 方式</title>
			<screen>
			<![CDATA[
// Using the IPC provider in node.js
var net = require('net');
var Web3 = require('web3');
var web3 = new Web3('/Users/myuser/Library/Ethereum/geth.ipc', net); // mac os path
			]]>
			</screen>
		</section>
	</section>
	<section id="web3">
		<title>web3</title>
		<section id="web3.version">
			<title>version 显示web3版本号</title>
			<screen>
			<![CDATA[
> web3.version
'1.0.0-beta.30'			
			]]>
			</screen>
		</section>
	</section>
	<section id="web3.eth">
		<title>web3.eth</title>
		<section id="web3.eth.getAccounts()">
			<title>查看账号列表</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');

web3.eth.getAccounts().then(console.log);		
			]]>
			</screen>
		</section>
		<section id="web3.eth.getCoinbase()">
			<title>查询矿工账号</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3('http://localhost:8545');
			
web3.eth.getCoinbase().then(console.log);			
			]]>
			</screen>
			<para>Callback 方式 </para>
			<screen>
			<![CDATA[
web3.eth.getCoinbase(
    function(error, result){ 
    if (error) {
        console.error(error);
    } else {
        console.log(result); 
    }
 })			
			]]>
			</screen>

		</section>
		<section id="web3.eth.getBalance()">
			<title>获得余额</title>
			<programlisting>
			<![CDATA[
web3.eth.getBalance(req.query.address).then(function(balance){
      res.json({"status": true, "code":0, "data":{"account":req.query.address, "balance": web3.utils.fromWei(balance)}}); 
});
			]]>
			</programlisting>
			<para>Callback 方式</para>
			<programlisting>
			<![CDATA[
web3.eth.getBalance(req.query.address, function (error, wei) {
    if (!error) {
        var balance = web3.utils.fromWei(wei, 'ether');
        res.json({"status": true, "code":0, "data":{"account":req.query.address, "balance": balance}});
    }else{
        console.log(error);
        res.json({"status": false, "code":1, "data":{"error":error.message}});
    }
});
			]]>
			</programlisting>
			<para>捕捉错误</para>
			<programlisting>
			<![CDATA[
router.get('/balance.json', function(req, res) {
 
	try {
		web3.eth.getBalance(req.query.address, function (error, wei) {
		    if (!error) {
		        var balance = web3.utils.fromWei(wei, 'ether');
		        res.json({"status": true, "code":0, "data":{"account":req.query.address, "balance": balance}});
		    }else{
		        console.log(error);
		        res.json({"status": false, "code":1, "data":{"error":error.message}})
	       }
		});
	}
	catch(error){
		res.json({"status": false, "code":1, "data":{"error":error.message}});
	};

});				
			]]>
			</programlisting>
		</section>
		<section id="web3.eth.sendTransaction()">
			<title>web3.eth.sendTransaction()</title>
			<programlisting>
			<![CDATA[
web3.eth.sendTransaction({
    from: coinbase,
    to: '0x2C687bfF93677D69bd20808a36E4BC2999B4767C',
    value: web3.utils.toWei('2','ether')
},
function(error, result){
    if(!error) {
        console.log("#" + result + "#")
    } else {
        console.error(error);
    }
});

var code = "0x603d80600c6000396000f3007c01000000000000000000000000000000000000000000000000000000006000350463c6888fa18114602d57005b6007600435028060005260206000f3";

web3.eth.sendTransaction({from: coinbase, data: code}, function(err, transactionHash) {
  if (!err)
    console.log(transactionHash); // "0x7f9fade1c0d57a7af66ab4ead7c2eb7b11a91385"
});

web3.eth.sendTransaction({from: coinbase, data: code}).then(function(receipt){
        console.log(receipt);
});			
			]]>
			</programlisting>
		</section>
		<section id="web3.eth.sendSignedTransaction">
			<title>web3.eth.sendSignedTransaction() 私钥签名转账</title>
			<section>
				<title>例子1</title>
				<programlisting>
			<![CDATA[
var account = web3.eth.accounts.privateKeyToAccount(privateKey);

web3.eth.accounts.signTransaction({
  from: account.address,
  to: "0x0013a861865d74b13ba94713d4e84d97c57e7081",
  gas: "3000000",
  value: '100000000000000000',
  gasPrice: '0x09184e72a000',
  data: "0x00"
}, account.privateKey)
.then(function(result) {
  console.log("Results: ", result)

  web3.eth.sendSignedTransaction(result.rawTransaction)
    .on('receipt', console.log);
})			
			]]>
				</programlisting>
			</section>
			<section>
				<title>例子2</title>

				<para>获取 pending 状态的区块</para>
				<screen>
			<![CDATA[
[ethereum@netkiller web3.example]$ vim test.js
[ethereum@netkiller web3.example]$ export PRIVATE_KEY=585a219fd6a5583b325e96770a88e69660f404efc06e56be71d82beedb7a989e
[ethereum@netkiller web3.example]$ echo $PRIVATE_KEY
585a219fd6a5583b325e96770a88e69660f404efc06e56be71d82beedb7a989e
[ethereum@netkiller web3.example]$ node
> process.env["PRIVATE_KEY"]
'585a219fd6a5583b325e96770a88e69660f404efc06e56be71d82beedb7a989e'
			]]>
				</screen>
				<programlisting>
			<![CDATA[
[ethereum@netkiller web3.example]$ cat transfer.js
fs = require('fs');
const Web3 = require('web3');
var Tx = require('ethereumjs-tx');
const web3 = new Web3('http://localhost:8545');
console.log(web3.version)

coinbase 	= "0xaa96686a050e4916afbe9f6d8c5107062fa646dd";
address 	= "0x372fda02e8a1eca513f2ee5901dc55b8b5dd7411"
contractAddress = "0x9ABcF16f6685fE1F79168534b1D30056c90B8A8A"

const main = async () => {
	var balance = await web3.eth.getBalance(coinbase);
	console.log(`Balance ETH: ${balance} \n`);

	const abi = fs.readFileSync('output/NetkillerToken.abi', 'utf-8');
	const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: address});

	var balance = await contract.methods.balanceOf(address).call();
	console.log(`Balance before send: ${balance} \n`);

	var count = await web3.eth.getTransactionCount(coinbase);
	const gasPrice = await web3.eth.getGasPrice();
	console.log(`gasPrice: ${gasPrice}\n`)
    	var gasLimit = 1000000;
	var transferAmount = 1000;
    // Chain ID of Ropsten Test Net is 3, replace it to 1 for Main Net
    var chainId = 1;

    var rawTransaction = {
        "from": coinbase,
        /* "nonce": "0x" + count.toString(16),*/
        "nonce":  web3.utils.toHex(count),
        "gasPrice": web3.utils.toHex(gasPrice),
        "gasLimit": web3.utils.toHex(gasLimit),
        "to": contractAddress,
        "value": "0x0",
        "data": contract.methods.transfer(address, transferAmount).encodeABI(),
        "chainId": web3.utils.toHex(chainId)
    };

    console.log(`Raw of Transaction: \n${JSON.stringify(rawTransaction, null, '\t')}\n`);

    // The private key for myAddress in .env
    var privateKey = new Buffer(process.env["PRIVATE_KEY"], 'hex');
    var tx = new Tx(rawTransaction);
    tx.sign(privateKey);
    var serializedTx = tx.serialize();

    // Comment out these four lines if you don't really want to send the TX right now
    console.log(`Attempting to send signed tx:  ${serializedTx.toString('hex')}\n`);

    var receipt = await web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'));

    // The receipt info of transaction, Uncomment for debug
    console.log(`Receipt info: \n${JSON.stringify(receipt, null, '\t')}\n`);

    // The balance may not be updated yet, but let's check
	var balance = await contract.methods.balanceOf(address).call();
	console.log(`Balance after send: ${balance}`);
}

main();
			]]>
				</programlisting>
				<screen>
			<![CDATA[
[ethereum@netkiller web3.example]$ node test.js
1.0.0-beta.34
Balance ETH: 8695480352861952

Balance before send: 100

gasPrice: 3000000000

Raw of Transaction:
{
	"from": "0xaa96686a050e4916afbe9f6d8c5107062fa646dd",
	"nonce": "0x20",
	"gasPrice": "0xb2d05e00",
	"gasLimit": "0xf4240",
	"to": "0x9ABcF16f6685fE1F79168534b1D30056c90B8A8A",
	"value": "0x0",
	"data": "0xa9059cbb000000000000000000000000372fda02e8a1eca513f2ee5901dc55b8b5dd741100000000000000000000000000000000000000000000000000000000000003e8",
	"chainId": "0x1"
}

Attempting to send signed tx:  f8a92084b2d05e00830f4240949abcf16f6685fe1f79168534b1d30056c90b8a8a80b844a9059cbb000000000000000000000000372fda02e8a1eca513f2ee5901dc55b8b5dd741100000000000000000000000000000000000000000000000000000000000003e825a05017058348d8f751cc40e71c13a63b8d8e21683841bd002c9f6bf691d34b6a4ba07df3fa8792aa66cc272ff89373509f6335272a4298e98177536a79c8ab7c947c

Receipt info:
{
	"blockHash": "0x32f45f27040b1df616ff4efd25557416793782541b995a6d4ecbd66f8441783f",
	"blockNumber": 5518045,
	"contractAddress": null,
	"cumulativeGasUsed": 5054117,
	"from": "0xaa96686a050e4916afbe9f6d8c5107062fa646dd",
	"gasUsed": 36184,
	"logs": [
		{
			"address": "0x9ABcF16f6685fE1F79168534b1D30056c90B8A8A",
			"topics": [
				"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
				"0x000000000000000000000000aa96686a050e4916afbe9f6d8c5107062fa646dd",
				"0x000000000000000000000000372fda02e8a1eca513f2ee5901dc55b8b5dd7411"
			],
			"data": "0x00000000000000000000000000000000000000000000000000000000000003e8",
			"blockNumber": 5518045,
			"transactionHash": "0x203ebcbe1cc8340c4b5a13f4e6c36a4f63142754437e0f43b0ff5e5c0bf512cc",
			"transactionIndex": 104,
			"blockHash": "0x32f45f27040b1df616ff4efd25557416793782541b995a6d4ecbd66f8441783f",
			"logIndex": 94,
			"removed": false,
			"id": "log_7ef3f104"
		}
	],
	"logsBloom": "0x
	"status": true,
	"to": "0x9abcf16f6685fe1f79168534b1d30056c90b8a8a",
	"transactionHash": "0x203ebcbe1cc8340c4b5a13f4e6c36a4f63142754437e0f43b0ff5e5c0bf512cc",
	"transactionIndex": 104
}

Balance after send: 1100
			]]>
				</screen>
			</section>
		</section>
		<section id="web3.eth.getBlock">
			<title>web3.eth.getBlock() 获取区块</title>
			<para>获取 pending 状态的区块</para>
			<screen>
			<![CDATA[
web3.eth.getBlock(
    "pending",
function (error, block) {
    if (error) {
        console.error(error);
    } else {
        console.log(block.transactions.length); 
    }
})			
			]]>
			</screen>
		</section>
	</section>
	<section id="web3.eth.personal">
		<title>账号管理</title>
		<section id="web3.eth.personal.unlockAccount()">
			<title>web3.eth.personal.unlockAccount()</title>
			<programlisting>
				<![CDATA[
var coinbase = "0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7";
//console.log(coinbase)
web3.eth.personal.unlockAccount(coinbase, "your password").then(console.log);
				]]>
			</programlisting>
		</section>
	</section>
	<section id="web3.js.contracts">
		<title>智能合约</title>
		<section>
			<title>部署合约</title>
			<para>解锁账号</para>
			<screen>
			<![CDATA[
> personal.unlockAccount(eth.accounts[0], "netkiller",5000)
true
> miner.stop()
true
> miner.start(2)			
			]]>
			</screen>
			<para>编译只能合约</para>
			<screen>
			<![CDATA[
solc --bin --abi --optimize -o ./output helloworld.sol		
			]]>
			</screen>
			<programlisting>
			<![CDATA[
var Web3 = require("web3");
var fs = require ('fs');

var web3 = new Web3("http://localhost:8545");

var abi = JSON.parse(fs.readFileSync('output/Netkiller.abi'));
var bin = '0x'+fs.readFileSync('output/Netkiller.bin').toString();

var myContract = new web3.eth.Contract(abi, null, {
    from: '0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7'
});

myContract.deploy({ data: bin }).send({
    from: '0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7',
    gas: 1500000,
    gasPrice: '30000000000000'
}).then(function(newContractInstance){
    console.log(newContractInstance.options.address) 
});			
			]]>
			</programlisting>
		</section>
		<section>
			<title>调用合约</title>
			<para>部署智能合约，你可以使用钱包部署，也可以使用Truffer部署，不管你采用什么方式，最终我们需要合约地址。</para>
			<programlisting>
			<![CDATA[
pragma solidity ^0.4.18;

contract MetaCoin {
	mapping (address => uint) balances;

	event Transfer(address indexed _from, address indexed _to, uint256 _value);

	function MetaCoin() public {
		balances[tx.origin] = 10000;
	}

	function sendCoin(address receiver, uint amount) public returns(bool sufficient) {
		if (balances[msg.sender] < amount) return false;
		balances[msg.sender] -= amount;
		balances[receiver] += amount;
		Transfer(msg.sender, receiver, amount);
		return true;
	}

	function getBalanceInEth(address addr) public view returns(uint){
		return convert(getBalance(addr),2);
	}

	function getBalance(address addr) public view returns(uint) {
		return balances[addr];
	}
	
	function convert(uint amount,uint conversionRate) public pure returns (uint convertedAmount)
	{
		return amount * conversionRate;
	}
	
}

			]]>
			</programlisting>
			<para>这里使用 Truffle 部署</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % truffle compile --all
Compiling ./contracts/MetaCoin.sol...
Writing artifacts to ./build/contracts

neo@MacBook-Pro ~/ethereum/truffle % truffle migrate --reset
Using network 'development'.

Running migration: 5_initial_migration.js
  Deploying MetaCoin...
  ... 0x9c006b398733a1d8679cbb00493ca75ff063f51c34521ae67a70523deeebf9c4
  MetaCoin: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6
Saving successful migration to network...
  ... 0x755a48ef99e488d7cf8460d718773a5afe73f760fb87697e51c40f3e6086f10b
Saving artifacts...
			
			]]>
			</screen>
			<para>得到合约地址 MetaCoin: 0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6
			</para>
			<para>编译合约获得 abi 接口</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/truffle % solc --bin --abi --optimize -o ./output contracts/MetaCoin.sol 
neo@MacBook-Pro ~/ethereum/truffle % cat output/MetaCoin.abi 
[{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"amount","type":"uint256"},{"name":"conversionRate","type":"uint256"}],"name":"convert","outputs":[{"name":"convertedAmount","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"}]			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
var Web3 = require("web3");
// 创建web3对象
var web3 = new Web3("http://localhost:9545");
// 合约ABI
var abi = [{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalanceInEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendCoin","outputs":[{"name":"sufficient","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"amount","type":"uint256"},{"name":"conversionRate","type":"uint256"}],"name":"convert","outputs":[{"name":"convertedAmount","type":"uint256"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"}];
// 合约地址
var address = "0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6";
var tokenContract = new web3.eth.Contract(abi, address);
// 调用函数
tokenContract.methods.getBalance("0x627306090abab3a6e1400e9345bc60c78a8bef57").call(null,function(error,result){
        console.log("getBalance "+result);
});
tokenContract.methods.getBalanceInEth("0x627306090abab3a6e1400e9345bc60c78a8bef57").call(null,function(error,result){
        console.log("getBalanceInEth "+result);
});	
tokenContract.methods.getBalance("0xf17f52151ebef6c7334fad080c5704d77216b732").call(null,function(error,result){
        console.log("getBalance 2 "+result);
});	
tokenContract.methods.sendCoin("0xf17f52151ebef6c7334fad080c5704d77216b732",387).send({from: '0x627306090abab3a6e1400e9345bc60c78a8bef57'})
.on('transactionHash', function(hash){
}).on('confirmation', function(confirmationNumber, receipt){
}).on('receipt', function(receipt){
    // receipt example
    console.log(receipt); //查询这里可以得到结果
}).on('error', console.error); // If a out of gas error, the second parameter is the receipt.
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
getBalance 10000
getBalanceInEth 20000
getBalance 2 0
{ transactionHash: '0x0f7514413865219d70873634c00d1b4746c5faa436283786f5414b483b6d6333',
  transactionIndex: 0,
  blockHash: '0x5a7662d14f78b6b4d64b05c0ec1e1e641bd39440467f0476409f4e49c21f287a',
  blockNumber: 11,
  gasUsed: 51024,
  cumulativeGasUsed: 51024,
  contractAddress: null,
  status: 1,
  events: 
   { Transfer: 
      { logIndex: 0,
        transactionIndex: 0,
        transactionHash: '0x0f7514413865219d70873634c00d1b4746c5faa436283786f5414b483b6d6333',
        blockHash: '0x5a7662d14f78b6b4d64b05c0ec1e1e641bd39440467f0476409f4e49c21f287a',
        blockNumber: 11,
        address: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
        type: 'mined',
        id: 'log_8b567824',
        returnValues: [Result],
        event: 'Transfer',
        signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
        raw: [Object] } } }
			]]>
			</screen>
			<para>再次运行</para>
			<screen>
			<![CDATA[
getBalance 9613
getBalanceInEth 19226
getBalance 2 387
{ transactionHash: '0x6d33487d9067494288190f7a64b3118c20560479e01afe8d53e37ca46a6001e4',
  transactionIndex: 0,
  blockHash: '0x28f6d416c68dbbd698d1a0b0fdc4ce842694d82318a38ea6395413fd15397642',
  blockNumber: 12,
  gasUsed: 36024,
  cumulativeGasUsed: 36024,
  contractAddress: null,
  status: 1,
  events: 
   { Transfer: 
      { logIndex: 0,
        transactionIndex: 0,
        transactionHash: '0x6d33487d9067494288190f7a64b3118c20560479e01afe8d53e37ca46a6001e4',
        blockHash: '0x28f6d416c68dbbd698d1a0b0fdc4ce842694d82318a38ea6395413fd15397642',
        blockNumber: 12,
        address: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
        type: 'mined',
        id: 'log_e5cfee46',
        returnValues: [Result],
        event: 'Transfer',
        signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
        raw: [Object] } } }

			]]>
			</screen>
			<para>第二次运行会打印出账号2的余额</para>
			<para>代码优化，由于开发阶段 abi 接口经常变化，从 solc 编译的abi 文件中直接读取最为方便。</para>
			<programlisting>
			<![CDATA[
const fs = require ('fs');
var Web3 = require("web3");
var web3 = new Web3("http://localhost:9545");
var abi = JSON.parse(fs.readFileSync('MetaCoin.abi'));
var address = "0xfb88de099e13c3ed21f80a7a1e49f8caecf10df6";
var tokenContract = new web3.eth.Contract(abi, address);
tokenContract.methods.getBalance("0x627306090abab3a6e1400e9345bc60c78a8bef57").call(null,function(error,result){
        console.log("getBalance "+result);
});	
			]]>
			</programlisting>

		</section>

		<section>
			<title>event</title>
			<para>下面以ERC20代币为例演示事件如何工作</para>
			<programlisting>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/web3 % cat event.js 

fs = require('fs');
var net = require('net');
var Web3 = require('web3');
var web3 = new Web3('/Users/neo/Library/Ethereum/geth.ipc', net);

console.log(web3.version)
const abi = fs.readFileSync('output/TokenERC20.abi', 'utf-8');

const contractAddress = "0x70682386d0dE84B1e549DC3c4305CCB2D261b2a8";
const coinbase = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7";
const toAddress = "0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA";

balanceWei = web3.eth.getBalance(coinbase);
console.log(balanceWei);

const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});

contract.events.Transfer({
    fromBlock: 0,
    toBlock:'latest'
}, function(error, event){ console.log(event); })
.on('data', function(event){
    console.log(event); // same results as the optional callback above
})
.on('changed', function(event){
    // remove event from local database
})
.on('error', console.error);
			]]>
			</programlisting>
			<para>运行后程序不会退出，会源源不断的打印出每笔交易</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/ethereum/web3 % node event.js 

{ address: '0x70682386d0dE84B1e549DC3c4305CCB2D261b2a8',
  blockNumber: 0,
  transactionHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
  transactionIndex: 0,
  blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
  logIndex: 0,
  removed: false,
  id: 'log_247b1779',
  returnValues: 
   Result {
     '0': '0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7',
     '1': '0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA',
     '2': '10000000',
     from: '0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7',
     to: '0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA',
     value: '10000000' },
  event: 'Transfer',
  signature: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
  raw: 
   { data: '0x0000000000000000000000000000000000000000000000000000000000989680',
     topics: 
      [ '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
        '0x000000000000000000000000b94054c174995ae2a9e7fcf6c7924635fba8ecf7',
        '0x000000000000000000000000f56b81a2bcb964d2806071e9be4289a5559bb0fa' ] } }
			]]>
			</screen>
		</section>
	</section>
	<section id="web3.utils">
		<title>utils</title>
		<section id="web3.utils.toWei()">
			<title>web3.utils.toWei()</title>
			<screen>
			<![CDATA[
web3.utils.toWei('1', 'ether');
> "1000000000000000000"

web3.utils.toWei('1', 'finney');
> "1000000000000000"

web3.utils.toWei('1', 'szabo');
> "1000000000000"

web3.utils.toWei('1', 'shannon');
> "1000000000"			
			]]>
			</screen>
		</section>
		<section id="web3.utils.fromWei()">
			<title>将 Wei 转换到指定单位</title>
			<programlisting>
			<![CDATA[
web3.utils.fromWei('1', 'ether');
> "0.000000000000000001"

web3.utils.fromWei('1', 'finney');
> "0.000000000000001"

web3.utils.fromWei('1', 'szabo');
> "0.000000000001"

web3.utils.fromWei('1', 'shannon');
> "0.000000001"
			]]>
			</programlisting>
		</section>
	</section>
	<section id="compile.solidity">
		<title>web3 编译合约</title>
		<section id="solc.compile">
			<title>solc.compile</title>

			<screen>
			<![CDATA[
pragma solidity ^0.4.0;
contract HelloWorldContract {
  function sayHi() constant returns (string){
    return 'Hello World';
  }
}			
			]]>
			</screen>
			<programlisting>
			<![CDATA[
const fs = require ('fs');
const solc = require ('solc');
const input = fs.readFileSync('HelloWorldContract.sol');
const output = solc.compile(input.toString(), 1);
for (var contractName in output.contracts){
 console.log(contractName + ': ' + output.contracts[contractName].bytecode)
}
			]]>
			</programlisting>
			<screen>
			<![CDATA[
> const fs = require ('fs');
undefined
> const solc = require ('solc');

undefined
> const input = fs.readFileSync('HelloWorldContract.sol');
undefined
> const output = solc.compile(input.toString(), 1);

undefined
> for (var contractName in output.contracts){
...  console.log(contractName + ': ' + output.contracts[contractName].bytecode)
... }
:HelloWorldContract: 6060604052341561000f57600080fd5b61014e8061001e6000396000f3006060604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c49c36c8114610045575b600080fd5b341561005057600080fd5b6100586100cf565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561009457808201518382015260200161007c565b50505050905090810190601f1680156100c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100d7610110565b60408051908101604052600b81527f48656c6c6f20576f726c640000000000000000000000000000000000000000006020820152905090565b602060405190810160405260008152905600a165627a7a723058206dc75b1be2caa91f056c3682d24390fcb090a96bbf1b2b4c11cdd807518dc03c0029
undefined
			]]>
			</screen>
		</section>
	</section>
	<section id="web3admin">
		<title>web3admin</title>
		<para>
			<ulink url="https://github.com/DecentricCorp/web3admin" />
		</para>
		<screen>
		<![CDATA[
npm install web3admin
		]]>
		</screen>
		<programlisting>
		<![CDATA[
const Web3 = require('web3')
var web3 = new Web3('http://localhost:8545')
const web3Admin = require('web3admin')
setTimeout(function(){
    web3Admin.extend(web3)
    console.log("turning on mining", web3.miner.start())
    console.log("isMining?", web3.eth.mining)
    console.log("isMining?", web3.eth.mining)
}, 1000)
		]]>
		</programlisting>
	</section>
	<section id="ABI-encoded">
		<title>ABI-encoded</title>
		<para>ABI-encoded 实际上就是构造方法变量数据</para>
		<programlisting>
		<![CDATA[
var abi = require('ethereumjs-abi')

var parameterTypes = ["address", "uint256", "bool"];
var parameterValues = ["0x1234567812345678", "0x314159268", true];

var encoded = abi.rawEncode(parameterTypes, parameterValues);

console.log(encoded.toString('hex'));
		]]>
		</programlisting>
		<para>在线生成工具 https://abi.sonnguyen.ws/， https://abi.hashex.org/ </para>
		<para>还有一种方法可以找到 ABI 数据
			https://etherscan.io/tx/0xc53f52b287ec1c71e9d203dd08cc68035ef40bf5155f8b0711da227c01d84d70
			查看 Input Data: 0029之后所有的数据就是 ABI
		</para>
	</section>
	<section id="web3.example">
		<title>实用例子</title>
		<section>
			<title>数据写入到区块链中</title>
			<para>做一笔交易，并写入数据到区块链中</para>
			<screen>
			<![CDATA[
let Web3 = require("web3");
let fs = require("fs");
let web3 = new Web3("http://localhost:8545");

let log = {
    time:(new Date).getTime(),
    type:"info",
    msg:"Web3 Test!!!"
};
let str = JSON.stringify(log);
console.log(str);
let data = Buffer.from(str).toString('hex');
data = '0x'+data;
console.log(data);

//将数据写入到交易中
let coinbase = "0x5c18a33df2cc41a1beddc91133b8422e89f041b7"
console.log(coinbase)
let user1 = "0xc2b9e316f246d35052118e51b55c75bfe99d247e";
web3.eth.personal.unlockAccount(coinbase, "coinbase");
let address = web3.eth.sendTransaction({
    from:coinbase,
    to:user1,
    value:'0x00',
    data:data
},function(error, hash){
    console.log(hash);
});
			]]>
			</screen>
			<para>运行上面程序，会产生一个交易，记下hash值，然后启动挖矿。</para>
			<screen>
			<![CDATA[
> miner.start();
null
# 过一段时间后停止
> miner.stop();
true
			]]>
			</screen>
			<para>然后查看这比交易</para>
			<screen>
			<![CDATA[
let Web3 = require("web3");
let fs = require("fs");
let web3 = new Web3("http://localhost:8545");
let address ="0xb15681eb4bdb6b9670d305fb341ebbc95d45c2ede0ea5034ef432b74f30b1b4f";
//从交易地址获取数据
web3.eth.getTransaction(address).then(console.log);

web3.eth.getTransaction(address,function(error, result){
    //console.log(result);
    inputData = result.input;
    res_str = Buffer.from(inputData.replace('0x',''),'hex').toString();
    res_json = JSON.parse(res_str);
    console.log(res_json);
});			
			]]>
			</screen>
			<para>结果输出</para>
			<screen>
			<![CDATA[
{ blockHash: '0x78dacc2af60900d2e4cae90b71e27446e6e883df36c53f21cbc9e071f7a586f4',
  blockNumber: 1258,
  from: '0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7',
  gas: 90000,
  gasPrice: '18000000000',
  hash: '0xb15681eb4bdb6b9670d305fb341ebbc95d45c2ede0ea5034ef432b74f30b1b4f',
  input: '0x7b2274696d65223a313531383933313435323537372c2274797065223a22696e666f222c226d7367223a22576562332054657374212121227d',
  nonce: 4,
  to: '0xc2b9e316F246d35052118E51B55C75BfE99d247e',
  transactionIndex: 0,
  value: '0',
  v: '0x41',
  r: '0x7fcd86c7fd975a0e98bd0e61a99da950b0155cd6c4581fefa4defbdcd404a930',
  s: '0x16f14ce1fbfadb9d59f343f8ac235cdd73dcedec5db1025ef91206b8bb17a827' }
{ time: 1518931452577, type: 'info', msg: 'Web3 Test!!!' }
			]]>
			</screen>
			<para>{ time: 1518931452577, type: 'info', msg: 'Web3 Test!!!' }
				就是保存在区块链中的数据。
			</para>
		</section>
		<section>
			<title>编译部署智能合约</title>
			<screen>
			<![CDATA[
console.log('Setting up...');
const fs = require ('fs');
const solc = require ('solc');
const Web3 = require ('web3');
const web3 = new Web3("http://localhost:8545");
console.log('Reading Contract...');
const input = fs.readFileSync('Netkiller.sol');
console.log('Compiling Contract...');
const output = solc.compile(input.toString(), 1);
//console.log(output);
const bytecode = output.contracts[':Netkiller'].bytecode;
//console.log(bytecode);
const abi = output.contracts[':Netkiller'].interface;
//console.log(abi);
//Contract Object
//const helloWorldContract = web3.eth.contract(JSON.parse(abi));

var myContract = new web3.eth.Contract(JSON.parse(abi), '0x5c18a33df2cc41a1beddc91133b8422e89f041b7', {
    from: '0x5c18a33df2cc41a1beddc91133b8422e89f041b7', // default from address
    gasPrice: '20000000000' // default gas price in wei, 20 gwei in this case
});

console.log('unlocking Coinbase account');
const password = "chen1980";
web3.eth.personal.unlockAccount("0x5c18a33df2cc41a1beddc91133b8422e89f041b7", password,100);

console.log("Deploying the contract");
			]]>
			</screen>
		</section>

		<section>
			<title>部署合约</title>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var net = require('net');
var web3 = new Web3(new Web3.providers.IpcProvider("~/netkiller/ethereum/geth.ipc",net));

var abi = [...];
var bin = "";

var tokenContract = new web3.eth.Contract(abi, null, {
    from: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6' // 目前web3没有api来解锁账户,只能自己事先解锁
});

tokenContract.deploy({
    data: bin,
    arguments: ['netkiller'] // 这里是构造函数传值，如果构造函数没有参数，请删除这行。
}).send({
    from: '0xFB88dE099e13c3ED21F80a7a1E49f8CAEcF10df6',
    gas: 1500000,
    gasPrice: '30000000000000'
}, function(error, transactionHash){
    console.log("deploy tx hash:"+transactionHash)
})
.on('error', function(error){ console.error(error) })
.on('transactionHash', function(transactionHash){ console.log("hash:",transactionHash)})
.on('receipt', function(receipt){
   console.log(receipt.contractAddress) // contains the new contract address
})
.on('confirmation', function(confirmationNumber, receipt){console.log("receipt,",receipt)})
.then(function(newContractInstance){
    console.log(newContractInstance.options.address) // instance with the new contract address
});			
			]]>
			</screen>
		</section>
		<section id="">
			<title>ERC20 Example</title>
			<para>通过Web3操作代币转账</para>
			<screen>
			<![CDATA[
fs = require('fs');
const Web3 = require('web3');
const web3 = new Web3('http://localhost:8545');
web3.version
const abi = fs.readFileSync('output/TokenERC20.abi', 'utf-8');

const contractAddress = "0x05A97632C197a0496bc939C4e666c2E03Cb95DD4";
const toAddress = "0x2C687bfF93677D69bd20808a36E4BC2999B4767C";

var coinbase;

web3.eth.getCoinbase().then(function (address){
  coinbase = address;
  console.log(address);
});

const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});

contract.methods.balanceOf('0x5c18a33DF2cc41a1bedDC91133b8422e89f041B7').call().then(console.log).catch(console.error);
contract.methods.balanceOf('0x2C687bfF93677D69bd20808a36E4BC2999B4767C').call().then(console.log).catch(console.error);

web3.eth.personal.unlockAccount(coinbase, "netkiller").then(console.log);
contract.methods.transfer('0x2C687bfF93677D69bd20808a36E4BC2999B4767C', 100).send().then(console.log).catch(console.error);

contract.methods.balanceOf('0x2C687bfF93677D69bd20808a36E4BC2999B4767C').call().then(console.log).catch(console.error);
			
			]]>
			</screen>
		</section>
	</section>

	<section id="web3.js.HDWallet">
		<title>HD Wallet(Hierarchical Deterministic wallet)</title>
		<para>BIP32 定义 Hierarchical Deterministic wallet (简称 "HD Wallet")，是一个系统可以从单个seed产生树状结构储存多组 keypairs（私钥和公钥）</para>
		<para>BIP39 定义钱包助记词和seed生成规则，一般由 12 -24个单字组成，称为 mnemonic。助记词列表，https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt</para>
		<para>BIP44 基于 BIP32 的系统，赋予树状结构中的各层特殊的意义。让同一个 seed 可以支援多币种、多帐户等 （btc一般是 m/44'/0'/0’/0，eth一般是 m/44'/60'/0'/0）</para>
		<screen>
		<![CDATA[
npm install bip39 ethereumjs-wallet ethereumjs-util --save
		]]>
		</screen>
		<section>
			<title>创建项目</title>
			<para>导入开发包</para>
			<screen>
			<![CDATA[
var bip39 = require('bip39')
var hdkey = require('ethereumjs-wallet/hdkey')
var util = require('ethereumjs-util')
			]]>
			</screen>
			<para>生成 mnemonic code</para>
			<screen>
			<![CDATA[
var mnemonic = bip39.generateMnemonic()
			]]>
			</screen>
			<para>生成 HD Wallet 首先将 mnemonic code 转成 binary二进制的 seed</para>
			<screen>
			<![CDATA[
var seed = bip39.mnemonicToSeed(mnemonic)
			]]>
			</screen>
			<para>生成 Master Key 地址 "m/44'/60'/0'/0/0" 使用 seed 生成 HD Wallet。
			</para>
			<screen>
			<![CDATA[
var hdwallet = hdkey.fromMasterSeed(seed)
			]]>
			</screen>
			<para>从路径 m/44'/60'/0'/0/0 导入 Master Key 并生成 Wallet 中第一个帐户的第一组
				keypair。
			</para>
			<screen>
			<![CDATA[
var key1 = hdwallet.derivePath("m/44'/60'/0'/0/0")
			]]>
			</screen>
			<para>使用 keypair 中的公钥产生 address。</para>
			<screen>
			<![CDATA[
var address1 = util.pubToAddress(key1._hdkey._publicKey, true)
			]]>
			</screen>
			<para>获得以太坊钱包地址</para>
			<screen>
			<![CDATA[
address1 = util.toChecksumAddress(address1.toString('hex'))
			]]>
			</screen>
			<para>操作演示</para>
			<screen>
			<![CDATA[
[ethereum@netkiller web3.js]$ node
> var bip39 = require('bip39')
undefined
> var hdkey = require('ethereumjs-wallet/hdkey')
undefined
> var util = require('ethereumjs-util')
undefined
> var mnemonic = bip39.generateMnemonic()
undefined
> mnemonic
'client dune unfair assume level width bind control mad member old crystal'
> var seed = bip39.mnemonicToSeed(mnemonic)
undefined
> seed
<Buffer 51 12 a3 47 f3 bb b9 24 80 ac 05 6c ce 8c 9f dd b2 98 c8 d3 06 8f 4d 0b 6c 90 86 aa d4 b6 41 36 35 5f b4 42 89 b5 e4 6d 43 9b cf 8d 6a d7 9b 45 3e 5a ... >
> var hdwallet = hdkey.fromMasterSeed(seed)
undefined
> hdwallet
EthereumHDKey {
  _hdkey:
   HDKey {
     versions: { private: 76066276, public: 76067358 },
     depth: 0,
     index: 0,
     _privateKey: <Buffer 1c 37 00 1b f7 1d a5 de 3a 8a 4c e8 54 2d 69 78 81 f3 aa a9 d5 3e 64 74 bd ea 76 28 44 07 d3 04>,
     _publicKey: <Buffer 03 77 fc 6b c7 f3 e3 51 01 db 95 0a a9 0f c0 7f 31 40 af 75 f8 7a 4f 5a c3 4c 93 ac cb 44 a3 20 5f>,
     chainCode: <Buffer 51 fe 32 23 a0 ab aa 10 5d ff 90 28 26 dc fc 86 fc 5f 8c dc 1b b7 39 31 7e 2d b8 a4 77 33 45 3a>,
     _fingerprint: 1056395940,
     parentFingerprint: 0,
     _identifier: <Buffer 3e f7 52 a4 ed 86 00 f7 ac 4d 1a b4 15 1c 0d 87 cd 7d fe de> } }
> var key1 = hdwallet.derivePath("m/44'/60'/0'/0/0")
undefined
> key1
EthereumHDKey {
  _hdkey:
   HDKey {
     versions: { private: 76066276, public: 76067358 },
     depth: 5,
     index: 0,
     _privateKey: <Buffer f5 92 b7 bf 06 ca 9f d7 69 6b a9 5d 6e d8 e3 57 de 6a 23 79 b6 d5 fe 1f fd 53 c6 b4 b0 63 cd 4a>,
     _publicKey: <Buffer 02 99 ff bb ea 3d 80 e1 8c d5 54 a1 6e 6a ca b2 4b 7e 69 3d 1d 2d 8a 68 f8 61 bf 18 dc 4a f8 d0 26>,
     chainCode: <Buffer 5a 9b b2 0e 7a 62 07 b0 82 db e5 5a 1f 17 4b 47 8a 64 cf 40 67 d5 49 09 89 da aa 33 66 00 d7 e6>,
     _fingerprint: 3510386860,
     parentFingerprint: 1205114865,
     _identifier: <Buffer d1 3c 40 ac 09 92 fc d7 a4 14 8e d8 91 d1 a7 21 55 7e b8 e3> } }
> var address1 = util.pubToAddress(key1._hdkey._publicKey, true)
undefined
> address1
<Buffer 37 2f da 02 e8 a1 ec a5 13 f2 ee 59 01 dc 55 b8 b5 dd 74 11>
> address1.toString('hex')
'372fda02e8a1eca513f2ee5901dc55b8b5dd7411'
			]]>
			</screen>
		</section>
		<section>
			<title>生成第二个钱包</title>
			<para>只需递增最后一位数即可 "m/44'/60'/0'/0/1"，
				"m/44'/60'/0'/0/2"，"m/44'/60'/0'/0/3"
			</para>
			<screen>
			<![CDATA[
var key2 = hdwallet.derivePath("m/44'/60'/0'/0/1")
			]]>
			</screen>
			<para>使用 keypair 中的公钥产生 address。</para>
			<screen>
			<![CDATA[
var address2 = util.pubToAddress(key2._hdkey._publicKey, true)
			]]>
			</screen>
			<para>获得以太坊钱包地址</para>
			<screen>
			<![CDATA[
address2 = util.toChecksumAddress(address2.toString('hex'))
			]]>
			</screen>
		</section>
		<section>
			<title>Mnemonic Code Converter</title>
			<para>
				<ulink url="https://iancoleman.io/bip39/" />
			</para>
			<para>输入 mnemonic，选择 ETH - Ethereum</para>
			<graphic format="png" fileref="../../images/ethereum/wallet/hdwallet/mnemonic.png" width="1024" srccredit="netkiller" />
			<para>系统将计算出钱包地址</para>
			<graphic format="png" fileref="../../images/ethereum/wallet/hdwallet/walletpath.png" width="1024" srccredit="netkiller" />
		</section>
		<section>
			<title>HD Wallet 例子</title>
			<programlisting>
			<![CDATA[
var bip39 = require('bip39');
var hdkey = require('ethereumjs-wallet/hdkey');
var util = require('ethereumjs-util');

mnemonic = 'client dune unfair assume level width bind control mad member old crystal';
var seed = bip39.mnemonicToSeed(mnemonic);
var hdwallet = hdkey.fromMasterSeed(seed);
var key1 = hdwallet.derivePath("m/44'/60'/0'/0/0");
var address1 = util.pubToAddress(key1._hdkey._publicKey, true);
var address = util.toChecksumAddress(address1.toString('hex'));

coinbase = "0xaa96686a050e4916afbe9f6d8c5107062fa646dd";
contractAddress = "0x9ABcF16f6685fE1F79168534b1D30056c90B8A8A"

console.log(address);

fs = require('fs');
const Web3 = require('web3');
const HDWalletProvider = require("truffle-hdwallet-provider");

const web3 = new Web3(new HDWalletProvider(mnemonic,'http://localhost:8545'));
console.log(web3.version)

web3.eth.getBalance("0xaa96686a050e4916afbe9f6d8c5107062fa646dd").then(function(balance){
      console.log( web3.utils.fromWei(balance) );
});

web3.eth.getBalance(address).then(function(balance){
      console.log( web3.utils.fromWei(balance) );
});

const abi = fs.readFileSync('output/NetkillerToken.abi', 'utf-8');
const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: address, gas: 100000});

contract.methods.balanceOf(coinbase).call().then(console.log).catch(console.log);
contract.methods.balanceOf(address).call().then(console.log).catch(console.log);
			]]>
			</programlisting>
		</section>
		<section>
			<title>获得钱包地址和私钥</title>
			<programlisting>
			<![CDATA[
const bip39 = require('bip39');
const hdkey = require('ethereumjs-wallet/hdkey');

const mnemonic = 'client dune unfair assume level width bind control mad member old crystal';
const hdwallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(mnemonic));
const path = "m/44'/60'/0'/0/0";
const wallet = hdwallet.derivePath(path).getWallet();

const address = `0x${wallet.getAddress().toString('hex')}`;
const privateKey = wallet.getPrivateKey().toString('hex');
// wallet._privKey.toString('hex');
console.log(`Address: ${address}`);
console.log(`Private Key: ${privateKey}`);

			]]>
			</programlisting>
		</section>
		<section>
			<title>truffle.js 例子</title>
			<screen>
			<![CDATA[
npm install truffle-hdwallet-provider
			]]>
			</screen>
			<programlisting>
			<![CDATA[

var HDWalletProvider = require("truffle-hdwallet-provider");

var mnemonic = "opinion destroy betray ...";

module.exports = {
  networks: {
    development: {
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    },
    ropsten: {
      provider: new HDWalletProvider(mnemonic, "https://ropsten.infura.io/"),
      network_id: 3
    }
  }
};
			]]>
			</programlisting>
		</section>
		<section>
			<title>代币转账</title>
			<!-- https://github.com/ethereum/web3.js/issues/1151 -->
		</section>
	</section>
	<section id="web3.js.keythereum">
		<title>从 .ethereum/keystore 文件导入私钥</title>

		<para></para>
		<screen>
		<![CDATA[
[ethereum@netkiller web3.example]$ npm install keythereum
		]]>
		</screen>
		<para>代码</para>
		<screen>
		<![CDATA[
var keyth=require('keythereum')
// Mac
// keystore = './Appdata/roaming/ethereum';
// Ubuntu 
// keystore = '~/.ethereum';
keystore = '../.ethereum';
var keyobj=keyth.importFromFile('0x372fda02e8a1eca513f2ee5901dc55b8b5dd7411',keystore)
var privateKey=keyth.recover('12345678',keyobj)
privateKey.toString('hex')
		]]>
		</screen>
		<para>操作演示</para>
		<screen>
		<![CDATA[
> var keyth=require('keythereum')
undefined
> keystore = '../.ethereum';
'../.ethereum'
> var keyobj=keyth.importFromFile('0x372fda02e8a1eca513f2ee5901dc55b8b5dd7411',keystore)
undefined
> var privateKey=keyth.recover('12345678',keyobj)
undefined
> privateKey.toString('hex')
'f592b7bf06ca9fd7696ba95d6ed8e357de6a2379b6d5fe1ffd53c6b4b063cd4a'
		]]>
		</screen>
	</section>
	<section id="web3.js.example">
		<title>Express + web3.js 实现简单网页钱包</title>
		<para>下面的例子，实现查询余额，创建账号，ETH转账，代币转账。</para>
		<section>
			<title>创建项目</title>
			<para>安装以太坊环境</para>
			<screen>
			<![CDATA[
curl -s https://raw.githubusercontent.com/oscm/shell/master/lang/gcc/gcc.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/lang/golang/golang-1.10.2.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/blockchain/ethereum/centos/go-ethereum-1.8.7.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/blockchain/ethereum/systemd/private.sh | bash

curl -s https://raw.githubusercontent.com/oscm/shell/master/lang/node.js/binrary/node-v10.1.0.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/lang/node.js/binrary/profile.d.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/blockchain/ethereum/truffle/truffle.sh | bash
			]]>
			</screen>
			<para>安装开发包</para>
			<screen>
			<![CDATA[
npm install express
npm install web3
npm install ejs
			]]>
			</screen>
		</section>
		<section>
			<title>主程序 main.js</title>
			<para></para>
			<screen>
			<![CDATA[
var express = require('express');
var app = express();

app.use(express.static('public'));
app.set("view engine","ejs");
app.set('views', __dirname + '/views');  

var async = require('async');

fs = require('fs');
var net = require('net');
var Web3 = require('web3');
var web3 = new Web3('/home/ethereum/.ethereum/geth.ipc', net);
const abi = fs.readFileSync( __dirname + '/abi/NKC.abi', 'utf-8');
const coinbase = "0xaa96686a050e4916afbe9f6d62fa646dd8c51070"
const contractAddress = "0x5F75DA091aBb25e055B91172C04371Ff4Dd563a0";

console.log(web3.version)


app.get('/', function (req, res) {
  //  res.send('Hello World');
   res.render("index",{}); 
})

app.get('/account.html', function (req, res) {
  var accounts;
  web3.eth.getAccounts(function(err, acc) {
    accounts = acc
    res.render("account",{"accounts":accounts}); 
  });
})

app.get('/new', function (req, res) {
  web3.eth.personal.newAccount(req.query.password).then(function(){
    res.redirect('/account.html');
  });
})

app.get('/balance.html', function (req, res) {

  web3.eth.getAccounts(function(err, accounts) {
    res.render("balance",{"accounts":accounts}); 
  });
})
app.post('/showbalance.html', function (req, res) {
  // web3.eth.getBalance(req.query.account).then(function(balance){
  //   res.render("transfer",{"account":req.query.account, "balance": balance}); 
  // });
  
  res.render("showbalance",{"account": "sss", "balance": 1000}); 
})

app.get('/getbalance.html', function (req, res) {
  var contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});
  web3.eth.getBalance(req.query.account).then(function(balance){
    contract.methods.balanceOf(req.query.account).call().then(function(token){
      // console.log(contract.symbol.call());
      // contract.methods.symbol().call().then(console.log);
      contract.methods.symbol().call().then(function(name){
        res.render("showbalance",{"account":req.query.account, "balance": web3.utils.fromWei(balance, 'ether'), "token": token, "name": name}); 
      });
      
    });
    
  });
})

app.get('/transfer.html', function (req, res) {
  var contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});
  web3.eth.getAccounts(function(err, accounts) {
    contract.methods.symbol().call().then(function(symbol){
      res.render("transfer",{"accounts":accounts, "symbol": symbol}); 
    });
  });
})

app.get('/send', function (req, res) {
  // console.log(req.query)
  web3.eth.personal.unlockAccount(req.query.from, req.query.password).then(function(error){
    if(req.query.token == "ETH"){  
      web3.eth.sendTransaction({
        from: req.query.from,
        to: req.query.to,
        value: web3.utils.toWei(req.query.amount ,'ether')
      },
      function(error, result){
          if(!error) {
              console.log("#" + result + "#")
              res.render("done",{"hash":result}); 
          } else {
              console.error(error);
          }
      });
      
    }else{
      var contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: req.query.from , gas: 1000000});
      contract.methods.transfer(req.query.to, req.query.amount).send().then(function(hash){
        console.log(hash)
        res.render("done",{"hash":hash.transactionHash}); 
      });
    }
  });
})

var server = app.listen(8080, function () {
 
  var host = server.address().address
  var port = server.address().port
 
  console.log("应用实例，访问地址为 http://%s:%s", host, port)
 
})
			]]>
			</screen>
		</section>
		<section>
			<title>ABI 文件 abi/NKC.abi</title>
			<screen>
			<![CDATA[
[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_extraData","type":"bytes"}],"name":"approveAndCall","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialSupply","type":"uint256"},{"name":"tokenName","type":"string"},{"name":"tokenSymbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Burn","type":"event"}]			
			]]>
			</screen>
		</section>
		<section>
			<title>页面视图</title>
			<section>
				<title>views/account.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>

<h1>Users</h1>
<ul id="accounts">
    <% accounts.forEach(function(account, index){ %>
    <li><%= index %>, <%= account %></li>
    <% }) %>
</ul>

<p>
新建账号
<form method="get" action="/new">
    密码：<input type="password" name="password" />
    <input type="submit" value="新建账号" />
</form>
</p>
				]]>
				</screen>
			</section>
			<section>
				<title>views/balance.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>

<h1>Account</h1>
<form method="get" action="/getbalance.html">

    <select name="account">
        <% accounts.forEach(function(account, index){ %>
        <option value ="<%= account %>"><%= account %></option>
        <% }) %>
    </select>
    <input type="submit" value="Submit" />
</form>
				]]>
				</screen>
			</section>
			<section>
				<title>views/done.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>

<p>转账完成</p>
<p>查看交易
<a href="https://etherscan.io/tx/<%= hash %>" target="etherscan">主网<%= hash %></a> <br />
</p>
				]]>
				</screen>
			</section>
			<section>
				<title>views/header.ejs</title>
				<screen>
				<![CDATA[
<a href="/account.html">账号</a> | <a href="/balance.html">余额</a> | <a href="/transfer.html">转账</a>
<br /> 
<hr />
				]]>
				</screen>
			</section>
			<section>
				<title>views/index.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>

Welcome !!!
				]]>
				</screen>
			</section>
			<section>
				<title>views/showbalance.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>
<p>
<h1>Account: <%= account %>, Balance: <%= balance %></h1>
</p>

<p>
    Token: <%= token%> <%= name%> 
</p>
				]]>
				</screen>
			</section>
			<section>
				<title>views/transfer.ejs</title>
				<screen>
				<![CDATA[
<%- include header.ejs %>

<h1>Account</h1>
<form method="get" action="/send">
    From：
    <select name="from">
        <% accounts.forEach(function(account, index){ %>
        <option value ="<%= account %>"><%= account %></option>
        <% }) %>
    </select>
    <br />
    To:
    <select name="to">
        <% accounts.forEach(function(account, index){ %>
        <option value ="<%= account %>"><%= account %></option>
        <% }) %>
    </select>

    <select name="token">
        <option value ="ETH">ETH</option>
        <option value ="<%= symbol %>"><%= symbol %></option>
    </select>

    <br />
    金额: <input type="text" name="amount" /> ETH
    <br />
    密码：<input type="password" name="password" />
    <br />
    <input type="submit" value="Submit" />
</form>
				]]>
				</screen>
			</section>
		</section>
		<section>
			<title>启动 Node 服务</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/example % node main.js
			]]>
			</screen>
			<para>浏览器访问 http://localhost:8080/ 可以进入钱包</para>
		</section>
	</section>
</chapter>

<chapter id="index"><?dbhtml dir="web3j" ?>
	<title>web3j v3.4.0 - Jave Client</title>
	<para>
		官方网站
		<ulink url="https://web3j.io">https://web3j.io</ulink>
	</para>
	<para>Java 客户端与 Server 之间采用json-rpc协议连接。</para>
	<section id="web3j.command.line.tools">
		<title>安装命令行工具</title>
		<para>web3j 命令用于将 sol 合约文件转换为 java 文件。</para>
		<section>
			<title>Mac OS</title>
			<screen>
			<![CDATA[
brew tap web3j/web3j
brew install web3j

neo@MacBook-Pro ~ % web3j

              _      _____ _     _        
             | |    |____ (_)   (_)       
__      _____| |__      / /_     _   ___  
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \ 
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/ 
                         _/ |             
                        |__/              

Usage: web3j version|wallet|solidity ...	
			]]>
			</screen>
		</section>
		<section>
			<title>二进制包安装</title>
			<para>
				下载二进制文件
				<ulink url="https://github.com/web3j/web3j/releases">https://github.com/web3j/web3j/releases</ulink>
			</para>
			<screen>
			<![CDATA[
wget https://github.com/web3j/web3j/releases/download/v3.2.0/web3j-3.2.0.zip
unzip web3j-3.2.0.zip

$ ./web3j-3.2.0/bin/web3j

              _      _____ _     _
             | |    |____ (_)   (_)
__      _____| |__      / /_     _   ___
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/
                         _/ |
                        |__/

Usage: web3j version|wallet|solidity ...
			]]>
			</screen>
		</section>
	</section>
	<section id="web3j.geth">
		<title>启动以太坊</title>

		<para>首先启动服务</para>
		<screen>
		<![CDATA[
neo@netkiller ~ % geth --networkid 123456 --rpc --rpcaddr="0.0.0.0" --rpccorsdomain "*" --nodiscover 
INFO [02-01|23:35:12] Starting peer-to-peer node               instance=Geth/v1.8.7-stable-4bb3c89d/linux-amd64/go1.10.2	
INFO [02-01|23:35:12] Allocated cache and file handles         database=/home/neo/.ethereum/geth/chaindata cache=128 handles=1024
INFO [02-01|23:35:12] Initialised chain configuration          config="{ChainID: 15 Homestead: 0 DAO: <nil> DAOSupport: false EIP150: <nil> EIP155: 0 EIP158: 0 Byzantium: <nil> Engine: unknown}"
INFO [02-01|23:35:12] Disk storage enabled for ethash caches   dir=/home/neo/.ethereum/geth/ethash count=3
INFO [02-01|23:35:12] Disk storage enabled for ethash DAGs     dir=/home/neo/.ethash               count=2
INFO [02-01|23:35:12] Initialising Ethereum protocol           versions="[63 62]" network=123456
INFO [02-01|23:35:12] Loaded most recent local header          number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded most recent local full block      number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded most recent local fast block      number=719 hash=61330b…82786e td=108754979
INFO [02-01|23:35:12] Loaded local transaction journal         transactions=0 dropped=0
INFO [02-01|23:35:12] Regenerated local transaction journal    transactions=0 accounts=0
WARN [02-01|23:35:12] Blockchain not empty, fast sync disabled 
INFO [02-01|23:35:12] Starting P2P networking 
INFO [02-01|23:35:12] RLPx listener up                         self="enode://9f6490ffb5236f2ddc5710ae73d47c740e0a3644bbd2d67029cf4a6c4693d2f470b642fd2cc3507f7e851df60aaeb730a1270b7a477f91ec5b6b17a8a4b40527@[::]:30303?discport=0"
INFO [02-01|23:35:12] IPC endpoint opened: /home/neo/.ethereum/geth.ipc 
INFO [02-01|23:35:12] HTTP endpoint opened: http://0.0.0.0:8545 
INFO [02-01|23:35:15] Mapped network port                      proto=tcp extport=30303 intport=30303 interface="UPNP IGDv1-IP1"		
		]]>
		</screen>
		<para>Web3j 将使用这个地址连接 HTTP endpoint opened:
			http://your_ip_address:8545
		</para>
	</section>
	<section id="web3j.pom.xml">
		<title>Maven pom.xml 文件</title>
		<screen>
		<![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>cn.netkiller</groupId>
	<artifactId>ethereum</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>ethereum</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.web3j</groupId>
			<artifactId>core</artifactId>
			<version>3.4.0</version>
		</dependency>
	</dependencies>
</project>
			
		]]>
		</screen>
	</section>
	<section id="web3j.type">
		<title>Java 与 Solidity 数据类型映射关系</title>
		<screen>
		<![CDATA[
boolean -> bool
BigInteger -> uint/int
byte[] -> bytes
String -> string and address types
List<> -> dynamic/static array			
		]]>
		</screen>
	</section>
	<section id="web3j.connect">
		<title>连接到服务器获取版本号</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum;

import java.io.IOException;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;

public class Web3JClient {
	// TODO Auto-generated method stub

	public static void main(String[] args) {
		String url = "http://172.16.0.1:8545/";
		Web3j web3j = Web3j.build(new HttpService(url)); // defaults to http://localhost:8545/

		try {
			Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().send();
			String clientVersion = web3ClientVersion.getWeb3ClientVersion();
			System.out.println(clientVersion);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
		]]>
		</programlisting>
		<para>运行结果</para>
		<screen>
		<![CDATA[
Geth/v1.8.7-stable-4bb3c89d/linux-amd64/go1.10.2				
		]]>
		</screen>
		<para>除了 TCP 方式连接，还支持 IPC 方式。这种方式比较少用，可以使用 localhost 替代。</para>
		<programlisting>
		<![CDATA[
// OS X/Linux/Unix:
Web3j web3 = Web3j.build(new UnixIpcService("/path/to/socketfile"));
...

// Windows
Web3j web3 = Web3j.build(new WindowsIpcService("/path/to/namedpipefile"));
...			
		]]>
		</programlisting>
	</section>
	<section id="web3j.account">
		<title>账号管理</title>
		<section>
			<title>获得账号列表</title>
			<programlisting>
			<![CDATA[
	public List<String> getAccountlist() {

		try {
			return web3j.ethAccounts().send().getAccounts();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}				
			]]>
			</programlisting>
		</section>
		<section>
			<title>获得账号信息</title>
			<programlisting>
			<![CDATA[
	public String getAccount(int index) {
		String account = null;

		try {
			account = web3j.ethAccounts().send().getAccounts().get(index);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return account;
	}				
			]]>

			</programlisting>
		</section>

		<section id="web3j.personalUnlockAccount">
			<title>解锁账号</title>
			<programlisting>
			<![CDATA[
Admin web3j = Admin.build(new HttpService());  // defaults to http://localhost:8545/
PersonalUnlockAccount personalUnlockAccount = web3j.personalUnlockAccount("0x000...", "a password").sendAsync().get();
if (personalUnlockAccount.accountUnlocked()) {
    // send a transaction
}				
			]]>
			</programlisting>
		</section>

		<section id="web3j.account.new">
			<title>创建账号</title>
			<programlisting>
			<![CDATA[
web3.eth.personal.newAccount('!@superpassword')
.then(console.log);
> '0x1234567891011121314151617181920212223456'			
			]]>
			</programlisting>
		</section>
	</section>
	<section id="web3j.credentials">
		<title>Credentials</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum.credentials;

import java.io.IOException;
import java.math.BigInteger;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.ECKeyPair;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;

public class CredentialsTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String url = "http://172.16.0.1:8545/";
		Web3j web3j = Web3j.build(new HttpService(url)); // defaults to http://localhost:8545/

		try {
			String account = web3j.ethAccounts().send().getAccounts().get(0);
			Credentials credentials = Credentials.create(account);
			ECKeyPair keyPair = credentials.getEcKeyPair();
			BigInteger privateKey = keyPair.getPrivateKey();
			BigInteger publicKey = keyPair.getPublicKey();

			System.out.println(privateKey);
			System.out.println("---");
			System.out.println(publicKey);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
			
		]]>
		</programlisting>
	</section>
	<section id="web3j.transaction">
		<title>交易</title>
		<section>
			<title>获取余额</title>
			<programlisting>
			<![CDATA[
	public BigInteger getBalance(String account) throws IOException {

		EthGetBalance ethGetBalance = web3j.ethGetBalance(account, DefaultBlockParameterName.LATEST).send();
		BigInteger balance = ethGetBalance.getBalance();
		return balance;

	}				
			]]>
			</programlisting>
		</section>
		<section>
			<title>转账</title>
			<programlisting>
			<![CDATA[
	public void transfer(String account, float coin)
			throws InterruptedException, IOException, TransactionException, Exception {
		String password = "";
		String walletfile = "/Users/neo/netkiller/UTC--2018-01-20T04-04-06.786586541Z--83fda0ba7e6cfa8d7319d78fa0e6b753a2bcb5a6";
		Credentials credentials = WalletUtils.loadCredentials(password, walletfile);
		TransactionReceipt transactionReceipt = Transfer
				.sendFunds(web3j, credentials, account, BigDecimal.valueOf(coin), Unit.ETHER).send();
		System.out.println(transactionReceipt.getStatus());
	}
			]]>
			</programlisting>
		</section>
		<section>
			<title>交易结果查询</title>
			<programlisting>
			<![CDATA[
EthTransaction transaction = web3.ethGetTransactionByHash("TRANSACTION_HASH")
                                   .sendAsync().get();
System.out.println(transaction.getResult());				
			]]>
			</programlisting>
		</section>
	</section>
	<section id="web3j.walletutils">
		<title>钱包</title>
		<section id="WalletUtils.generateFullNewWalletFile">
			<title>创建钱包</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.ethereum.wallet;

import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.WalletUtils;

public class WalletMain {

	public void createWallet() throws NoSuchAlgorithmException, NoSuchProviderException,
			InvalidAlgorithmParameterException, CipherException, IOException {

		File file = new File("/tmp/ethereum/keystore");
		String password = "passw0rd";
		String fileName = WalletUtils.generateFullNewWalletFile(password, file);
		System.out.println(fileName);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		WalletMain wallet = new WalletMain();
		try {
			wallet.createWallet();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
				
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % mkdir -p /tmp/ethereum/keystore
neo@MacBook-Pro ~ % ll /tmp/ethereum/keystore
total 8
-rw-r--r--  1 neo  wheel   491B Feb  4 18:30 UTC--2018-02-04T10-30-58.476000000Z--75d01e920d6e018445dae504058ce4d968fd2a58.json

neo@MacBook-Pro ~ % cat /tmp/ethereum/keystore/UTC--2018-02-04T10-30-58.476000000Z--75d01e920d6e018445dae504058ce4d968fd2a58.json 
{"address":"75d01e920d6e018445dae504058ce4d968fd2a58","id":"80700448-69bc-475a-aaf9-f2b836f17b13","version":3,"crypto":{"cipher":"aes-128-ctr","ciphertext":"fe86f5dbd61d15d092f9d6870e70bff7ed99a7925703ea71eef23669c8e3ec62","cipherparams":{"iv":"d058819ab660cd062080b405591ba143"},"kdf":"scrypt","kdfparams":{"dklen":32,"n":262144,"p":1,"r":8,"salt":"f69c535137b08667dbac53b8001313f5b43f81fce67a5d0e94b518c97d212d14"},"mac":"c247e34760bc838c3a4c8b2da286ccc6acec244bbc13fc6cc9ce28e88a7319d5"}}
			]]>
			</screen>
		</section>
		<section id="WalletUtils.loadCredentials">
			<title>从钱包取出账号</title>
			<programlisting>
			<![CDATA[
package cn.netkiller.ethereum.wallet;

import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;

import org.web3j.crypto.CipherException;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;

public class WalletMain {

	public void walletAddress() throws IOException, CipherException {

		File file = new File(
				"/tmp/ethereum/keystore/UTC--2018-02-04T10-43-27.339000000Z--7cab470df532710d13078c5cdc0812a27f70cf51.json");
		String password = "passw0rd";
		Credentials credentials = WalletUtils.loadCredentials(password, file);
		System.out.println(credentials.getAddress());

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		WalletMain wallet = new WalletMain();
		try {
			wallet.walletAddress();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
			]]>
			</programlisting>
			<para>运行结果</para>
			<screen>
			<![CDATA[
0x7cab470df532710d13078c5cdc0812a27f70cf51				
			]]>
			</screen>

		</section>
	</section>
	<section id="web3j.contract">
		<title>智能合约</title>
		<programlisting>
		<![CDATA[
neo@netkiller ~/ethereum/solidity % cat netkiller.sol 
pragma solidity ^0.4.18;

contract Netkiller {
    string name;
    int num;
    function Netkiller() public{
        name = "default";
        num = 1;
    }
    function setName(string _name) public{
        name = _name;
    }
    function getName() public view returns(string){
        return name;
    }
    function setNum(int n) public{
        num = n;
    }
    function addNum(int m) public view returns(int res){
        res = m + num;
    }
}

		]]>
		</programlisting>
		<para>编译智能合约</para>
		<screen>
		<![CDATA[
$ solc /path/to/<smart-contract>.sol --bin --abi --optimize -o output/
$ web3j solidity generate /path/to/<smart-contract>.bin /path/to/<smart-contract>.abi -o /path/to/src/main/java -p com.your.organisation.name			
		]]>
		</screen>
		<screen>
		<![CDATA[
$ solc netkiller.sol --bin --abi --optimize -o output/
$ web3j solidity generate output/Netkiller.bin output/Netkiller.abi -p cn.netkiller.ethereum.contract -o java

              _      _____ _     _        
             | |    |____ (_)   (_)       
__      _____| |__      / /_     _   ___  
\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \ 
 \ V  V /  __/ |_) |.___/ / | _ | || (_) |
  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/ 
                         _/ |             
                        |__/              

Generating cn.netkiller.ethereum.contract.Netkiller ... File written to java	

neo@netkiller ~/ethereum/solidity % ll java/cn/netkiller/ethereum/contract/Netkiller.java 
-rw-rw-r-- 1 neo neo 5.9K Feb  3 23:02 java/cn/netkiller/ethereum/contract/Netkiller.java
		]]>
		</screen>
		<para>启动以太坊，并开始挖矿。注意参数 --mine --minerthreads 1 ，你也可以启动后在JavaScript
			控制台钟启动挖矿。
		</para>
		<screen>
		<![CDATA[
neo@netkiller ~ % geth --networkid 123456 --rpc --rpcaddr="0.0.0.0" --rpccorsdomain "*" --mine --minerthreads 1	
		]]>
		</screen>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum;

import java.math.BigInteger;

import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Contract;
import org.web3j.tx.ManagedTransaction;

import cn.netkiller.ethereum.contract.Netkiller;

public class ContractTest {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		String walletfile = "/Users/neo/Downloads/UTC--2018-01-20T04-04-06.786586541Z--83fda0ba7e6cfa8d7319d78fa0e6b753a2bcb5a6";

		Web3j web3j = Web3j.build(new HttpService("http://172.16.0.1:8545"));
		Credentials credentials = WalletUtils.loadCredentials("", walletfile);

		Netkiller contract = Netkiller.deploy(web3j, credentials, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT).send();

		System.out.println(contract.isValid());
		if (contract.isValid()) {
			System.out.println("---");
			String contractAddress = contract.getContractAddress();
			System.out.println(contractAddress);
			System.out.println("---");
			String result = contract.getName().send();
			System.out.println(result);

			contract.setName("Netkiller").send();
			System.out.println(contract.getName().send());
			System.out.println("---");
			contract.setNum(BigInteger.valueOf(8)).send();
			System.out.println(contract.addNum(BigInteger.valueOf(8)).send());
			System.out.println("---");
		} else {
			System.out.println("Deploy ERROR !!!");
		}
	}

}
		
		]]>
		</programlisting>
		<para>运行结果</para>
		<screen>
		<![CDATA[
true
---
0xef872f1b344a4b7c765c7d765a3cc82b741777a9
---
default
Netkiller
---
16
---
		]]>
		</screen>
		<para>在程序运行是，去看 geth 打印的日志，有如下记录打印</para>
		<screen>
		<![CDATA[
INFO [02-04|00:04:43] Submitted transaction                    fullhash=0x9f70ccb600294d2dd6dda08d090362131b107d42a692f27dd4a3b7548dbaf22c recipient=0xEF872F1b344a4B7C765c7D765a3cC82b741777a9			
		]]>
		</screen>
		<section id="contract.load">
			<title>载入合约</title>
			<programlisting>
			<![CDATA[
HelloWorld contract = HelloWorld.load(contractAddress,web3j,credentials, ManagedTransaction.GAS_PRICE, Contract.GAS_LIMIT);				
			]]>
			</programlisting>
			<screen>
			<![CDATA[]]>
			</screen>
		</section>
	</section>
	<section id="web3j.infura">
		<title>Infura</title>
		<programlisting>
		<![CDATA[
package cn.netkiller.ethereum.infura;

import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.Web3ClientVersion;
import org.web3j.protocol.http.HttpService;

public class Infura {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			Web3j web3 = Web3j.build(new HttpService("https://rinkeby.infura.io/CsS9shwaAab0z7B4LP2d"));
			Web3ClientVersion web3ClientVersion = web3.web3ClientVersion().send();
			System.out.println(web3ClientVersion.getWeb3ClientVersion());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
		
		]]>
		</programlisting>
	</section>
</chapter>
<chapter id="web3.py">
	<title>web3.py - A python interface for interacting with the Ethereum
		blockchain and ecosystem.
	</title>
	<para>
		文档地址
		<ulink url="http://web3py.readthedocs.io/">http://web3py.readthedocs.io/</ulink>
	</para>

</chapter>
<chapter id="index"><?dbhtml dir="api" ?>
	<title>Ethereum Developer APIs</title>
	<section>
		<title>API Keys</title>
		<para>https://etherscan.io/register</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/newaccount.png" width="" srccredit="netkiller" />
		<para>前往邮箱查看以太坊发出的确认邮件，并点击里面链接地址。</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/email.png" width="" srccredit="netkiller" />
		<para>登陆</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/login.png" width="" srccredit="netkiller" />
		<para>创建 API Key</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-create.png" width="" srccredit="netkiller" />
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-token.png" width="" srccredit="netkiller" />
		<para>创建完成</para>
		<graphic format="png" fileref="../../images/ethereum/etherscan/api/api-keys-successfully.png" width="" srccredit="netkiller" />
	</section>
	<section>
		<title>账号</title>
		<para>获得账号的余额</para>
		<screen>
		<![CDATA[
https://api.etherscan.io/api?module=account&action=balance&address=0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a&tag=latest&apikey=JFZWPE88I3TZFZWXKVHJ32INUIYQRRINJ9
		]]>
		</screen>
	</section>
</chapter>
