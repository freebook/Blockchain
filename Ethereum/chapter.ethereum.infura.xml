<?xml version="1.0" encoding="UTF-8"?>
<chapter id="infura">
	<title>infura</title>
	<para>
		<ulink url="https://infura.io/" />
	</para>
	<para>SCALABLE BLOCKCHAIN INFRASTRUCTURE</para>
	<para>We provide secure, reliable, and scalable access to Ethereum and
		IPFS.
	</para>
	<section id="infura.signup">
		<title>注册账号</title>
		<para>

		</para>
		<para>
			<ulink url="https://infura.io/signup" />
		</para>
		<para>输入用户名和邮箱即可注册</para>
		<graphic format="png" fileref="../../images/ethereum/infura/signup.png"
			width="1024" srccredit="netkiller" />
		<para>这些地址你需要牢记</para>
		<graphic format="png" fileref="../../images/ethereum/infura/network.png"
			width="1024" srccredit="netkiller" />

		<literallayout>
			<![CDATA[
NETWORK		DESCRIPTION			URL
Mainnet		production network	https://mainnet.infura.io/CsS9shwaAab0z7B4LP2d
Ropsten		test network			https://ropsten.infura.io/CsS9shwaAab0z7B4LP2d
INFURAnet	test network			https://infuranet.infura.io/CsS9shwaAab0z7B4LP2d
Kovan		test network			https://kovan.infura.io/CsS9shwaAab0z7B4LP2d
Rinkeby		test network			https://rinkeby.infura.io/CsS9shwaAab0z7B4LP2d
IPFS			gateway				https://ipfs.infura.io			
			]]>
		</literallayout>
		<para>这是你的 api key CsS9shwaAab0z7B4LP2d 请保存好</para>
		<para>Mainnet 是以太坊主网</para>
		<para>IPFS 是一个分布式区中心化的文件系统。</para>
	</section>
	<section id="infura.api">
		<title>infura 接口</title>
		<section>
			<title>jsonrpc</title>
			<para>
				JSONRPC 文档
				<ulink
					url="https://github.com/INFURA/infura/blob/master/docs/source/index.html.md#choosing-a-client-to-handle-your-request" />
			</para>
			<screen>
				<![CDATA[
$ curl -X POST -H "Content-Type: application/json" \
  --data '{"jsonrpc": "2.0", "id": 1, "method": "eth_blockNumber", "params": []}' \
  "https://mainnet.infura.io/CsS9shwaAab0z7B4LP2d"
				]]>
			</screen>
		</section>
		<section>
			<title>INFURA API</title>
			<screen>
				<![CDATA[
https://api.infura.io/v1/jsonrpc/mainnet/eth_blockNumber?token=CsS9shwaAab0z7B4LP2d				
				]]>
			</screen>
		</section>
	</section>
	<section id="infura.truffle">
		<title>配置 Truffle</title>
		<para>安装 truffle-hdwallet-provider</para>
		<screen>
			<![CDATA[
$ npm install truffle-hdwallet-provider			
			]]>
		</screen>
		<para>修改 truffle.js 文件</para>
		<programlisting>
			<![CDATA[
var HDWalletProvider = require("truffle-hdwallet-provider"); 

// infura 为你提供的 apikey 请与你申请到的 key 保持一致
var infura_apikey = "CsS9shwaAab0z7B4LP2d";
 
// 你以太坊钱包地址 进入 MetaMask -> Settings -> reveal seed words 复制到此处
var mnemonic = "drill hunt food team moment mistake bird attitude tunnel ecology sister resist"; 

module.exports = {
  networks: {
    development: {
      host: "127.0.0.1",
      port: 7545,
      network_id: "*"
    },
    private: {
      host: "localhost",
      port: 8545,
      network_id: "*" // Match any network id
    },
    ropsten: {
      provider: new HDWalletProvider(mnemonic, "https://ropsten.infura.io/"+infura_apikey),
      network_id: 3,
      gas: 3012388,
      gasPrice: 30000000000
    },
    main: {
      provider: new HDWalletProvider(mnemonic, "https://mainnet.infura.io/"+infura_apikey),
      network_id: 3,
      gas: 3012388,
      gasPrice: 1000000000
    }
  }
};

			]]>
		</programlisting>
		<para>部署合约到 ropsten 测试网， 在命令行输入如下命令，通过 --network 设置发布的目标网络：</para>
		<screen>
			<![CDATA[
truffle migrate --network ropsten			
			]]>
		</screen>
		<para>主网络发布</para>
		<screen>
			<![CDATA[
truffle migrate --network main
			]]>
		</screen>
	</section>

	<section id="infura.web3.js">
		<title>infura.io web3.js 开发</title>
		<section id="infura.web3.ropsten">
			<title>Web3 通过 infura 连接到 Ropsten 测试网络</title>
			<programlisting>
			<![CDATA[
fs = require('fs');
const Web3 = require('web3');
const web3 = new Web3('https://ropsten.infura.io/CsS9shwaAab0z7B4LP2d');
console.log(web3.version)
const abi = fs.readFileSync('output/TokenERC20.abi', 'utf-8');

const contractAddress = "0x70682386d0dE84B1e549DC3c4305CCB2D261b2a8";
const coinbase = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7";
const toAddress = "0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA";

balanceWei = web3.eth.getBalance(coinbase);
console.log(balanceWei);

const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});

contract.methods.balanceOf(coinbase).call().then(console.log).catch(console.error);
contract.methods.balanceOf(toAddress).call().then(console.log).catch(console.error);	
			]]>
			</programlisting>
		</section>
		<section id="infura.web3.truffle-hdwallet-provider">
			<title>使用 truffle-hdwallet-provider 连接到 https://ropsten.infura.io
			</title>
			<programlisting>
			<![CDATA[
fs = require('fs');
const Web3 = require('web3');
const HDWalletProvider = require("truffle-hdwallet-provider");
const mnemonic = "drill hunt food team moment mistake bird attitude tunnel ecology sister resist";
const web3 = new Web3(new HDWalletProvider(mnemonic,'https://ropsten.infura.io/CsS8shwaCab0a7B4LP2d'));
console.log(web3.version)
const abi = fs.readFileSync('output/TokenERC20.abi', 'utf-8');

const contractAddress = "0x70682386d0dE84B1e549DC3c4305CCB2D261b2a8";
const coinbase = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7";
const toAddress = "0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA";

balanceWei = web3.eth.getBalance(coinbase);
console.log(balanceWei);

const contract = new web3.eth.Contract(JSON.parse(abi), contractAddress, { from: coinbase , gas: 100000});

contract.methods.balanceOf(coinbase).call().then(console.log).catch(console.log);
contract.methods.balanceOf(toAddress).call().then(console.log).catch(console.log);
			]]>
			</programlisting>
		</section>
		<section>
			<title>转账</title>
			<programlisting>
			<![CDATA[
	const coinbase = "0xB94054c174995AE2A9E7fcf6c7924635FBa8ECF7";
	const toAddress = "0xf56b81a2bcb964D2806071e9Be4289A5559BB0fA";			
	const privateKey = "e33ea581d88e0bd2270c0fd109604039a3de59671b6d69882b4cb4688d3dcffd"
	
	var nonce = await web3.eth.getTransactionCount(coinbase);
	var gasPrice = await web3.eth.getGasPrice();
	console.log(`gasPrice: ${gasPrice}\n`)
    var gasLimit = 1000000;
	var transferAmount = 1000;
    var chainId = 1;

    var rawTransaction = {
        "from": coinbase,
        "nonce":  web3.utils.toHex(count),
        "gasPrice": web3.utils.toHex(gasPrice),
        "gasLimit": web3.utils.toHex(gasLimit),
        "to": toAddress,
        "value": "100",
        "data": "0x0",
        "chainId": web3.utils.toHex(chainId)
    };
   
    var privateKey = new Buffer(privateKey, 'hex');
    var tx = new Tx(rawTransaction);
    tx.sign(privateKey);
    var serializedTx = tx.serialize();

    web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex')).on('receipt', console.log);
			]]>
			</programlisting>
			<programlisting>
			<![CDATA[
'use strict';
const Web3 = require('web3');

const wsAddress = 'wss://rinkeby.infura.io/ws';
const contractJson = '(taken from solc or remix online compiler)';
const privateKey = '0xOOOX';
const contractAddress = '0xOOOX';
const walletAddress = '0xOOOX';

const webSocketProvider = new Web3.providers.WebsocketProvider(wsAddress);
const web3 = new Web3(new Web3.providers.WebsocketProvider(webSocketProvider));
const contract = new web3.eth.Contract(
  JSON.parse(contractJson),
  contractAddress
);
// change this to whatever contract method you are trying to call, E.G. SimpleStore("Hello World")
const query = contract.methods.SimpleStore('Hello World');
const encodedABI = query.encodeABI();
const tx = {
  from: walletAddress,
  to: contractAddress,
  gas: 2000000,
  data: encodedABI,
};

const account = web3.eth.accounts.privateKeyToAccount(privateKey);
console.log(account);
web3.eth.getBalance(walletAddress).then(console.log);

web3.eth.accounts.signTransaction(tx, privateKey).then(signed => {
  const tran = web3.eth
    .sendSignedTransaction(signed.rawTransaction)
    .on('confirmation', (confirmationNumber, receipt) => {
      console.log('=> confirmation: ' + confirmationNumber);
    })
    .on('transactionHash', hash => {
      console.log('=> hash');
      console.log(hash);
    })
    .on('receipt', receipt => {
      console.log('=> reciept');
      console.log(receipt);
    })
    .on('error', console.error);
});
			]]>
			</programlisting>
		</section>
	</section>

</chapter>