<?xml version="1.0" encoding="UTF-8"?>
<chapter>
	<title>以太坊</title>
	<section>
		<title>名词解释</title>
		<literallayout>
		<![CDATA[
DAPP 去中心化应用		
		]]>
		</literallayout>
		<literallayout>
		<![CDATA[
离线的钱包就是冷钱包，
在线的钱包就是热钱包，

从安全性角度看：冷钱包>热钱包>平台
从便捷性看：平台>热钱包>冷钱包

bip32 = hd wallets, what they are how they work
bip39 = specific type of mnemonic, and the process for turning it into a bip32 seed
bip44 = a specific format of a bip32 wallet
		]]>
		</literallayout>

	</section>
	<section id="iban">
		<title>IBAN (International Bank Account Number)</title>
		<para>iban其英文全称为International Bank Account Number， 即国际银行帐号。iban的作用是为全球任意一家银行中的任意一个账户 生成一个全球唯一的账号，以便进行跨行交易。</para>
	</section>
	<section id="ethereum.cost">
		<title>如何计算Gas手续费</title>
		<para>下面我们用实例讲解怎样计算以太坊在执行交易时花费的 gas 费用。</para>
		<screen>
		<![CDATA[
> miner.start(1)
null
		]]>
		</screen>
		<para>准备两个账号</para>
		<screen>
		<![CDATA[
> eth.getBalance(eth.accounts[3])
1000000000000000000
> eth.getBalance(eth.accounts[5])
0
		]]>
		</screen>
		<para>开始计算 gas 费用</para>
		<screen>
		<![CDATA[
> var estimateGas = eth.estimateGas({from:eth.accounts[1], to: eth.accounts[2], value: web3.toWei(1)})
undefined
> console.log(estimateGas)
21000
undefined
> 
> var cost = estimateGas * gasPrice
undefined
> console.log(cost)
378000000000000
undefined
> web3.fromWei(cost)
"0.000378"
		]]>
		</screen>
		<para>gas 花费 0.000378 ETH</para>

	</section>
	<section>
		<title>转出账号中所有 ETH，Ethereum Wallet 中的 Send everything 实现方法</title>
		<screen>
		<![CDATA[
> personal.unlockAccount(eth.accounts[3], "12345678")
true

> eth.sendTransaction({from: eth.accounts[3], to: eth.accounts[5], value: eth.getBalance(eth.accounts[3]) - cost, gas: estimateGas})
"0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d"
		]]>
		</screen>
		<para>查看交易细节</para>
		<screen>
		<![CDATA[
> web3.eth.getTransaction("0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d")
{
  blockHash: "0x59a9905831e7ae3cb9e7c6f125cf48e2688ef4b39317838f6f6b6c8837d01404",
  blockNumber: 4367,
  from: "0x8efb99ec55bcfbe2cfe47918f2d9e55fa732111f",
  gas: 21000,
  gasPrice: 18000000000,
  hash: "0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d",
  input: "0x",
  nonce: 15,
  r: "0xa297401df3a1fb0298cbc1dd609deebe9ded319fadc55934ecef4d525198215",
  s: "0x780d8c46bc8d1bb89ae9d78055307d9d68a4f89ba699ef86d3f8ba88383139a6",
  to: "0xf0688330101d53bd0c6ede2ef04d33c2010e9a5d",
  transactionIndex: 0,
  v: "0x42",
  value: 999622000000000000
}
		
		]]>
		</screen>
		<para>现在查看from账号，余额已经清零。</para>
		<screen>
		<![CDATA[
> eth.getBalance(eth.accounts[3])
0		
		]]>
		</screen>
	</section>
	<section id="bip39">
		<title>BIP39协议:使用助记词生成确定性钱包</title>
		<literallayout>
		<![CDATA[
BIP:39
层：应用层
标题：使用助记词生成确定性钱包秘钥
作者：Marek Palatinus <slush@satoshilabs.com>
     Pavol Rusnak <stick@satoshilabs.com>
     Aaron Voisine <voisine@gmail.com>
     Sean Bowe <ewillbefull@gmail.com>
状态：已经被提议
类型：标准化跟踪
创建日期：2013-09-10
译者：kimziv
		]]>
		</literallayout>
		<section id="摘要">
			<title>摘要</title>
			<para>这个BIP描述了使用助记码或者助记句子（简称助记词）--一组便于记忆的单词来生成确定性钱包。</para>
			<para>这个BIP由两部分构成：生成助记词和把生成的助记词转化成一个二进制种子。这个种子后面会更急类似于BIP32的方法生成确定性钱包。</para>
		</section>
		<section id="动机">
			<title>动机</title>
			<para> 与处理原始的二进制或者十六进制的钱包种子相比，在人机交互过程中助记词是更胜一筹的。这些助记单词可以被写在纸上或者通过电话说出来。			</para>
			<para>本指南旨在通过人类可读的转录来传输计算机生成的随机性。并不是将用户创建的句子（也称为脑钱包）处理到钱包种子中的方法。</para>
		</section>
		<section id="生成助记词">
			<title>生成助记词</title>
			<para>助记符必须以32位的倍数编码熵。随着熵的安全性提高，同时句子的长度也在增加。我们将初始熵长度称为ENT。ENT允许的大小为128-256位。</para>
			<para>首先，生成ENT位的初始熵。通过取第一个生成的校验和</para>
			<literallayout>
			<![CDATA[
ENT/32			
			]]>
			</literallayout>
			<para>它的SHA256哈希的位。该校验和附加到初始熵的末尾。接下来，这些连接的比特位被分成多个11位的组，每个组用从0-2047的数字编码，用作单词表的索引。最后，我们将这些数字转换为单词，并将加入的所有单词组成助记句。</para>
			<para>下表描述了初始熵长度（ENT），校验和长度（CS）和生成助记词（MS）的长度之间的关系。</para>
			<literallayout>
			<![CDATA[
CS = ENT / 32
MS = (ENT + CS) / 11			
			]]>
			</literallayout>
			<screen>
			<![CDATA[
ENT		CS		ENT + CS	MS
------------------------------
128		4		132			12
160		5		165			15
192		6		198			18
224		7		231			21
256		8		264			24			
			]]>
			</screen>
		</section>
		<section id="单词表">
			<title>单词表</title>
			<itemizedlist>
				<title>理想的单词列表具有以下特点：</title>
				<listitem>
					<para>智能选词</para>
					<para>单词列表以这种方式创建：输入前四个字母来就足以明确地标识这个单词；</para>
				</listitem>
				<listitem>
					<para>避免相似的单词</para>
					<para>"build" and "built", "woman" and "women", or "quick" and "quickly" 这样的词对，不仅使记忆困难，而且更容易出错，更难猜到；</para>
				</listitem>
				<listitem>
					<para>排序的单词列表</para>
					<para>排序的单词列表允许更有效地查找代码字（即，实现可以使用二分搜索而不是线性搜索）</para>
					<para>这也允许使用字典树（前缀树），例如用于更好的压缩</para>
				</listitem>
			</itemizedlist>
			<para>单词表可以包含本土字符，但必须使用规范化形式兼容性分解（NFKD）以UTF-8编码。</para>
		</section>
		<section id="从助记词到种子">
			<title>从助记词到种子</title>
			<para>用户可以决定用密码保护他们的助词。如果密码不存在，则使用空字符串“”代替。</para>
			<para>要通过助记词创建一个二进制种子，我们使用助记符作为密码（UTF-8 NFKD）和字符串“mnemonic”+ passphrase 作为盐（再次以UTF-8 NFKD）来调用PBKDF2函数。迭代计数设置为2048，HMAC-SHA512用作伪随机函数。派生密钥的长度为512位（= 64字节）。</para>
			<para>该种子可以随后用于使用BIP-0032或类似方法产生确定性钱包。</para>
			<para>助记词转换为二进制种子完全独立于生成这个助记词。这导致相当简单的代码; 助记词结构没有约束，客户可以自由地实现自己的单词列表，甚至是整个助记词的生成器，允许字典列表中的输入错误检测或其他用途的灵活性。</para>
			<para>虽然使用的助记词可能不是通过“生成助记词”部分中描述的算法生成的，但这是不建议的，软件必须使用单词表计算助记词的校验和，如果无效则发出警告。</para>
			<para>所描述的方法还提供似乎可信的可否认性，因为每个密码短语产生一个有效的种子（因此产生确定性钱包），但是只有正确的那一个才能使所需的钱包可用。		</para>
		</section>
		<section id="单词列表">
			<title>单词列表</title>
			<para>
				<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md" />
			</para>
			<para>如果一个 HD 钱包助记词是 12 个单词，一共有 2048 个单词可能性，如何算出随机的生成的助记词可能性是一个排列问题，根据公式： n!/( n - r )! ，既 2048!/(2048-12)! = 5.2715379713014884760003093175282e+39。 </para>
			<orderedlist>
				<title>Wordlists</title>
				<listitem>
					<para>
						English
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Japanese
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/japanese.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Korean
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/korean.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Spanish
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/spanish.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Chinese (Simplified)
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/chinese_simplified.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Chinese (Traditional)
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/chinese_traditional.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						French
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/french.txt" />
					</para>
				</listitem>
				<listitem>
					<para>
						Italian
						<ulink url="https://github.com/bitcoin/bips/blob/master/bip-0039/italian.txt" />
					</para>
				</listitem>
			</orderedlist>
		</section>
		<section id="开发库">
			<title>开发库</title>
			<section id="">
				<title>Node.js</title>
				<para><ulink url="https://www.npmjs.com/package/bip39" /></para>
			</section>
			<section>
				<title>Python</title>
				<para>
					<ulink url="https://github.com/trezor/python-mnemonic" />
				</para>
			</section>
			<section id="其他实现">
				<title>其他实现</title>
				<screen>
				<![CDATA[
Elixir: https://github.com/izelnakri/mnemonic

Objective-C: https://github.com/nybex/NYMnemonic

Haskell: https://github.com/haskoin/haskoin

.NET C# (PCL): https://github.com/Thashiznets/BIP39.NET

.NET C# (PCL): https://github.com/NicolasDorier/NBitcoin

JavaScript: https://github.com/bitpay/bitcore-mnemonic, https://github.com/bitcoinjs/bip39 (used by blockchain.info)

Ruby: https://github.com/sreekanthgs/bip_mnemonic

Rust: https://github.com/infincia/bip39-rs

Swift: https://github.com/CikeQiu/CKMnemonic

C++: https://github.com/libbitcoin/libbitcoin/blob/master/include/bitcoin/bitcoin/wallet/mnemonic.hpp

C (with Python/Java/Javascript bindings): https://github.com/ElementsProject/libwally-core				
				]]>
				</screen>
			</section>
		</section>
		<section id="">
			<title>Netkiller 助记词词库</title>
			<para>HD Wallet 采用 2048 个单词，或者汉字作为助记词，这些词库对外公开，很多钱包仅仅使用path第一个地址并且没有加密。如果你知道某个用户的助记词中的11各词的排列顺序，那么我们就可以通过穷举方法，算出所有地址的私钥，如果碰巧找到了已经在使用的地址。就可以将里面的ETH全部转走。</para>
			<para>为了增加 HD Wallet 的安全，我做了一个词库，这个词库不对外公开，并且使用的汉字均是不常用汉字。只能复制粘贴，几乎很难使用输入法输入该汉字。</para>
			<para>同时path 还做了分层，和索引地址。分层采用时间维度，索引采用随机数， Seed 做加密处理。助记词共 15 个汉字。</para>
			<para>效果如下</para>			
			<programlisting>
			<![CDATA[
汉字助记词：欈 戀 髎 響 麢 戵 邎 蠢 鶖 躒 蠈 鰘 譥 趱 巆
地址：0x4949225eab0121d1e0b0eeb286a12b04ff596471
私钥：b5ce4ac958fbdcd385d6ae850c1870c6da7b990981363c25036a31ba06be6636

汉字助记词：霼 彎 曤 纀 鸇 鷔 鶹 纚 鱱 讁 艣 鼴 黭 纒 贛
地址：0x430097d16819108068a7af22a116285e54bc3e6b
私钥：3b78431a43a2c69e861870f0eff1d54d3965247ca5e588a9f907904f9ea5b822

汉字助记词：聾 鱦 骥 鬘 鰕 蘲 韃 鏻 雤 鑀 瓤 蘣 壥 躠 罋
地址：0x641fd58728cf08bc8795d41cfd3885a4f1c8dced
私钥：b7c2ff2a39e3a534e6e89288b05b4a283b10b34b2dfca2b336676729c7a68ad1

汉字助记词：轕 鶼 瀝 钁 麝 鸑 灙 纞 躐 嚹 櫞 鱁 贑 癠 躤
地址：0xae6ad7cf3e31556bc7262e25fba2ebad9954d08b
私钥：c989fe5c108b0bd33e5731919e09c30c639a4ff29fb4e66fe3052975855181f6

汉字助记词：鰵 鐗 鱇 彏 鱞 鷮 鼯 矃 曟 鬙 衢 斅 櫜 鸒 襨
地址：0x7fc6bca55c51ab3b4266d8f67d63c196ac874d93
私钥：53e755075653a64867f885e702ca0a2612bdd13ec2bed0df647bf568a639bc46			
			]]>
			</programlisting>
		</section>
	</section>
<!-- 	<section id="bip84">
		<title></title>
		<para></para>
	</section> -->
</chapter>