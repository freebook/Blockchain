<?xml version="1.0" encoding="UTF-8"?>
<chapter>
	<title>以太坊</title>
	<section>
		<title>名词解释</title>
		<literallayout>
		<![CDATA[
DAPP 去中心化应用		
		]]>
		</literallayout>
		<literallayout>
		<![CDATA[
离线的钱包就是冷钱包，
在线的钱包就是热钱包，

从安全性角度看：冷钱包>热钱包>平台
从便捷性看：平台>热钱包>冷钱包

bip32 = hd wallets, what they are how they work
bip39 = specific type of mnemonic, and the process for turning it into a bip32 seed
bip44 = a specific format of a bip32 wallet
		]]>
		</literallayout>

	</section>
	<section id="iban">
		<title>IBAN (International Bank Account Number)</title>
		<para>
			以太坊官网的说明：
			<ulink url="https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol" />
		</para>
		<section>
			<title>iban：国际银行账号</title>

			<para>iban其英文全称为International Bank Account Number， 即国际银行帐号。iban的作用是为全球任意一家银行中的任意一个账户 生成一个全球唯一的账号，以便进行跨行交易。一个iban账号看起来像这样：</para>
			<screen>
		<![CDATA[
XE039RBH0XKV9FZMTH2701Q37FLX10NTWXU		
		]]>
			</screen>
			<para>iban地址最多可以包含34个字母和数字，其中的字母大小写不敏感。</para>
			<orderedlist>
				<title>iban 中包含以下信息</title>
				<listitem>国别码，用来标识国家，遵循ISO3166-1 alpha-2标准</listitem>
				<listitem>错误识别码，用来对地址进行校验，采用mod-97-10校验和协议，即ISO/IEC 7064:2003标准</listitem>
				<listitem>基本银行账号，即BBAN（Basic Bank Account Number），用来标识银行机构、网点及 客户在该机构内的账号，这三部分信息的编码方案依赖于前面提及的国别码</listitem>
			</orderedlist>
		</section>
		<section>
			<title>以太坊iban：新的国别码和BBAN编码方案</title>
			<para>以太坊引入了一个新的IBAN国别码：XE，其中E代表Ethereum，X代表非法币（non-jurisdictional currencies）。同时，以太坊提出了三种BBAN的编码格式：direct、basic和indirect。</para>
			<para>direct编码方案中的BBAN为30个字母/数字，只有一个字段：账户编号。例如，以太坊 地址00c5496aee77c1ba1f0854206a26dda82a81d6d8转换为direct方案的BBAN账号，就 得到XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS。</para>
			<para>可以使用web3.js中的web3.eth.Iban.toIban() 方法来执行这一转换：</para>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3();
web3.eth.Iban.toIban("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");

'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'
			]]>
			</screen>
			<para>basic编码方案与direct方案的唯一区别在于，其BBAN长度为31个字母/数字，因此该方案 不兼容IBAN。</para>
			<orderedlist>
				<title>indrect编码方案中的BBAN长度为16个字母/数字，包含三个字段</title>
				<listitem>资产编号，由3个字母/数字组成</listitem>
				<listitem>机构编号，由4个字母/数字组成</listitem>
				<listitem>机构内客户编号，由9个字母/数字组成</listitem>
			</orderedlist>
			<para>例如，一个采用indrect编码方案的以太坊iban账号，看起来是这样：</para>
			<screen>
			<![CDATA[
XE81ETHXREGGAVOFYORK
			]]>
			</screen>
			<para>XE81ETHXREGGAVOFYORK</para>
			<orderedlist>
				<title></title>
				<listitem>ETH：在本例中，表示客户账户内的资产编号。目前ETH是唯一有效的资产编号</listitem>
				<listitem>XREG：机构编号，XREG表示以太坊基本注册合约</listitem>
				<listitem>GAVOFYORK：机构内客户的编号</listitem>
			</orderedlist>
		</section>
		<section>
			<title>iban账号与以太坊地址的转换</title>
			<para>如前所述，使用web3.eth.Iban.toIban()方法，可以将一个以太坊地址 转换为direct编码方案的iban账号。与之对应的，可以使用web3.eth.Iban.toAddress()方法， 将一个采用direct编码方案的iban账号，转换回以太坊地址。例如：</para>
			<screen>
			<![CDATA[
var Web3 = require('web3');
var web3 = new Web3();
web3.eth.Iban.toAddress("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");

'0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8'
			]]>
			</screen>
		</section>
		<section>
			<title>检查iban账号的有效性</title>
			<para>iban账号中的校验和用来帮助核验一个给定字符串是否为有效的iban账号。可以使用 web3.js中的web3.eth.Iban.isValid() 来进行执行校验。例如：</para>
			<screen>
			<![CDATA[
> web3.eth.Iban.isValid("XE81ETHXREGGAVOFYORK");
true

> var iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
undefined
> iban.isValid();
true

> web3.eth.Iban.isValid("XE82ETHXREGGAVOFYORK");
false
			]]>
			</screen>
		</section>

	</section>
	<section id="ethereum.cost">
		<title>如何计算Gas手续费</title>
		<para>下面我们用实例讲解怎样计算以太坊在执行交易时花费的 gas 费用。</para>
		<screen>
		<![CDATA[
> miner.start(1)
null
		]]>
		</screen>
		<para>准备两个账号</para>
		<screen>
		<![CDATA[
> eth.getBalance(eth.accounts[3])
1000000000000000000
> eth.getBalance(eth.accounts[5])
0
		]]>
		</screen>
		<para>开始计算 gas 费用</para>
		<screen>
		<![CDATA[
> var estimateGas = eth.estimateGas({from:eth.accounts[1], to: eth.accounts[2], value: web3.toWei(1)})
undefined
> console.log(estimateGas)
21000
undefined
> 
> var cost = estimateGas * gasPrice
undefined
> console.log(cost)
378000000000000
undefined
> web3.fromWei(cost)
"0.000378"
		]]>
		</screen>
		<para>gas 花费 0.000378 ETH</para>

	</section>
	<section id="Send everything">
		<title>转出账号中所有 ETH，Ethereum Wallet 中的 Send everything 实现方法</title>
		<screen>
		<![CDATA[
> personal.unlockAccount(eth.accounts[3], "12345678")
true

> eth.sendTransaction({from: eth.accounts[3], to: eth.accounts[5], value: eth.getBalance(eth.accounts[3]) - cost, gas: estimateGas})
"0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d"
		]]>
		</screen>
		<para>查看交易细节</para>
		<screen>
		<![CDATA[
> web3.eth.getTransaction("0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d")
{
  blockHash: "0x59a9905831e7ae3cb9e7c6f125cf48e2688ef4b39317838f6f6b6c8837d01404",
  blockNumber: 4367,
  from: "0x8efb99ec55bcfbe2cfe47918f2d9e55fa732111f",
  gas: 21000,
  gasPrice: 18000000000,
  hash: "0x4e27a477e128b200239bc2ecd899077c6ae064da963a919fef41bcc7462aec8d",
  input: "0x",
  nonce: 15,
  r: "0xa297401df3a1fb0298cbc1dd609deebe9ded319fadc55934ecef4d525198215",
  s: "0x780d8c46bc8d1bb89ae9d78055307d9d68a4f89ba699ef86d3f8ba88383139a6",
  to: "0xf0688330101d53bd0c6ede2ef04d33c2010e9a5d",
  transactionIndex: 0,
  v: "0x42",
  value: 999622000000000000
}
		
		]]>
		</screen>
		<para>现在查看from账号，余额已经清零。</para>
		<screen>
		<![CDATA[
> eth.getBalance(eth.accounts[3])
0		
		]]>
		</screen>
	</section>
	<section id="block.confirmations">
		<title>（0/12 block confirmations)</title>
		<programlisting>
		<![CDATA[
web3.eth.blockNumber-web3.eth.getTransaction(<txhash>).blockNumber		
		]]>
		</programlisting>
	</section>
	<section id="keystore">
		<title>太坊账户管理 keystore 文件</title>
		<para></para>
		<literallayout>
		<![CDATA[
Post author: Martin Wang
Post link: http://stevenocean.github.io/2018/04/02/about-ethereum-keystore.html
Copyright Notice: All articles in this blog are licensed under CC BY-NC-SA 4.0 unless stating additionally.		
		]]>
		</literallayout>
		<section>
			<title>什么是 keystore 文件</title>
			<para>
				以太坊的每个外部账户都是由一对密钥（一个公钥和一个私钥）定义的。账户以地址为索引，地址由公钥衍生而来，取公钥的最后 20个字节。每对私钥 /地址都编码在一个钥匙文件里，也就是我们说的keystore文件。该文件是 JSON 文本文件，可以用任何文本编辑器打开和浏览。钥匙文件的关键部分，账户私钥，通常用你创建帐户时设置的密码进行加密。也就是说 keystore 文件，就是你独有的、用于签署交易的以太坊私钥的加密文件。如果你丢失了这个文件，你就丢失了私钥，意味着你失去了签署交易的能力，意味着你的资金被永久的锁定在了你的账户里。
			</para>
		</section>
		<section>
			<title>keystore 文件的内容
			</title>
			<para>我们先看一下keystore文件都包含哪些数据:</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/Library/Ethereum/testnet/keystore % cat UTC--2018-04-01T09-30-44.943874000Z--d5eeae04932dbc2e65b948a76a6cdfd44323a5dd
{	"address":"d5eeae04932dbc2e65b948a76a6cdfd44323a5dd",
	"crypto":{
		"cipher":"aes-128-ctr",
		"ciphertext":"16715298517abb35cb44e9a32d1f81f21ead63006c57eb0ff434318a6ea3ed3f",
		"cipherparams":{
			"iv":"1ff6fea34e682158e7660ae67960ff76"
		},
		"kdf":"scrypt",
		"kdfparams":{
			"dklen":32,
			"n":262144,
			"p":1,
			"r":8,
			"salt":"a99af42dac2363db631ef7c57a25705c7efdee73b19c11b27f9a91d41cd32d1c"
		},
		"mac":"dcd248fb996604dfcb69a86604af3992b4a9b8d20cc05e0c7608189dbbe66eda"
	},
	"id":"55edb869-1c86-4c68-924e-8247575a158b",
	"version":3
}			
			]]>
			</screen>
			<literallayout>
			<![CDATA[
我们可以看到大部分内容都在 crypto 字段中，这里包括：

cipher：对称 AES 算法的名称;
cipherparams：上述 cipher 算法需要的参数;
ciphertext：你的以太坊私钥使用上述 cipher 算法进行加密;
kdf：密钥生成函数，用于让你用密码加密 keystore 文件;
kdfparams：上述 kdf 算法需要的参数;
Mac：用于验证密码的代码。			
			]]>
			</literallayout>
		</section>
		<section>
			<title>keystore文件如何工作的？</title>

			<section>
				<title>加密你的私钥</title>
				<para>就像之前提到的，一个以太坊账户就是用于加密签署交易的一个私钥-公钥对。为了确保你的私钥没有在文件中明文存储（即任何人只要能得到这个文件就能读），使用强对称算法（cipher）对其加密至关重要。</para>
				<para>这些对称算法使用密钥来加密数据。加密后的数据可以使用相同的方法和同样的密钥来解密，因此算法命名为对称算法。在本文中，我们称这个对称密钥为解密密钥，因为它将用于对我们的以太坊私钥进行解密。</para>
				<para>加密过程，如下图：</para>
				<graphic format="png" fileref="../images/ethereum/keystore/keystore-1.png" width="1024" srccredit="netkiller" />
				<para>以下是 cipher，cipherparams 和 ciphertext 对应的概念：</para>
				<orderedlist>
					<title></title>
					<listitem>
						<para>cipher: 是用于加密以太坊私钥的对称加密算法。此处cipher用的是 aes-128-ctr 加密模式。</para>
					</listitem>
					<listitem>
						<para>cipherparams: 是 aes-128-ctr 加密算法需要的参数。在这里，用到的唯一的参数 iv，是aes-128-ctr加密算法需要的初始化向量。</para>
					</listitem>
					<listitem>
						<para>ciphertext: 密文是 aes-128-ctr 函数的加密输入。</para>
					</listitem>
				</orderedlist>
				<para>在这里，你已经有了进行解密以太坊私钥计算所需要的一切。但是我们首先要取回解密密钥。</para>
			</section>
			<section>
				<title>用你的密码来保护它</title>
				<para>要确保解锁你的账户很容易，你不需要记住你的每一个又长又非用户友好型的用于解密 ciphertext 密文解密密钥。相反，以太坊开发者选择了基于密码的保护，也就是说你只需要输入密码就能拿回解密密钥。</para>
				<para>为了能做到这一点，以太坊用了一个密钥生成函数，输入密码和一系列参数就能计算解密密钥。</para>
				<orderedlist>
					<title>这就是 kdf 和 kdfparams 的用途：</title>
					<listitem>
						<para>kdf: 是一个密钥生成函数，根据你的密码计算（或者取回）解密密钥。在这里，kdf 用的是scrypt算法。</para>
					</listitem>
					<listitem>
						<para>kdfparams: 是scrypt函数需要的参数。在这里，简单来说，dklen、n、r、p 和 salt 是 kdf 函数的参数。</para>
					</listitem>
				</orderedlist>
				<para>在这里，用 kdfparams 参数对 scrypt 函数进行调整，反馈到我们的密码中，你就会得到解密密钥也就是密钥生成函数的输出。</para>
				<graphic format="png" fileref="../images/ethereum/keystore/keystore-2.png" width="1024" srccredit="netkiller" />
			</section>
			<section>
				<title>确认输入的密码是正确的</title>
				<para>这就是 keystore 文件中 mac 值起作用的地方。在密钥生成函数执行之后，它的输出（解密密钥）和 ciphertext 密文就被处理，并且和 mac（就像一种认可的印章）作比较。如果结果和 mac 相同，那么密码就是正确的，并且解密就可以开始了。</para>
				<graphic format="png" fileref="../images/ethereum/keystore/keystore-3.png" width="1024" srccredit="netkiller" />
			</section>
			<section>
				<title>将这三步结合起来</title>
				<para>
					首先，你输入了密码，这个密码作为 kdf 密钥生成函数的输入，来计算解密密钥。然后，刚刚计算出的解密密钥和 ciphertext 密文连接并进行处理，和 mac 比较来确保密码是正确的。最后，通过 cipher 对称函数用解密密钥对 ciphertext 密文解密。
				</para>
				<graphic format="png" fileref="../images/ethereum/keystore/keystore-4.png" width="1024" srccredit="netkiller" />
				<para>就像你从图中可以看到的，整个过程可以看做一个黑盒（不过，图中是个灰盒），你的密码是惟一的输入，你的以太坊私钥是惟一的输出。所需的其他信息都可以在你的以太坊账户创建时生成的keystore文件中获得。</para>
			</section>
		</section>

	</section>
	<section id="batch.transfer">
		<title>批量转账遇到的问题与解决方案</title>
		<para>有时我们需要将Token发送到多个地址上去。通常的做法就是使用web.js写一个循环程序，但是实际使用过程中发现这种做法存在很多问题，常会发生转账失败情况。</para>
		<para>经过分析造成发送失败原因是，频率太高，因为web.js 是异步操作，当前程序还未完成交易，交易尚未确认的情况下第二笔交易发送出去，这时就会出错。</para>
		<programlisting>
		<![CDATA[
web3.eth.getTransactionCount(from).then(function(nonce){
	// 问题就出在 nonce ， nonce 如同数据库中的序列主键，如果上一个交易没有完成，下一个交易取得 nonce + 1 后与上一个 pending 的交易相同，产生冲突
}		
		]]>
		</programlisting>
		<para>最好的解方案是在合约中实现批量转账功能，这样需要一个交易 txhash 完成多比交易。</para>
		<para>如果你的Token已经在使用了，且没有批量转账的功能怎么解决呢？我们可以在写一个Token 继承原来的Token，在新的 Token 中实现批量转账功能</para>
		<programlisting>
		<![CDATA[
Function: batchTransfer(address[] _to, uint256[] _value)

MethodID: 0x88d695b2
[0]:  0000000000000000000000000000000000000000000000000000000000000040
[1]:  00000000000000000000000000000000000000000000000000000000000000a0
[2]:  0000000000000000000000000000000000000000000000000000000000000002
[3]:  000000000000000000000000372967130b1a7cd386348bc59de905e628e36f3a
[4]:  000000000000000000000000372967130b1a7cd386348bc59de905e628e36f3b
[5]:  0000000000000000000000000000000000000000000000000000000000000002
[6]:  000000000000000000000000000000000000000000000000000000000000000c
[7]:  0000000000000000000000000000000000000000000000000000000000000022		
		]]>
		</programlisting>
		<screen>
		<![CDATA[
		
		]]>
		</screen>
	</section>
	<section id="token.exchange">
		<title>代币兑换</title>
		<para>兑换代币通常是指使用 ETH 或者其他币兑换Token，我是这样实现的，使用智能合约，将 ETH 达到指定合约地址，合约会打回代币给用户。</para>
		<screen>
		<![CDATA[
User --> Wallet --> transfer ETH --> contract Address 
           ^                              |
           |                              |
           +----------- Token ------------+	
		]]>
		</screen>
		<para>这种方式不用人工参与，也不用开发程序。缺点不能时时汇率，需要人工设置汇率。</para>
	</section>
</chapter>