<?xml version="1.0" encoding="UTF-8"?>
<chapter id="ipfs">
	<title>IPFS（InterPlanetary File System，星际文件系统）</title>
	<!-- https://flyingzumwalt.gitbooks.io/decentralized-web-primer/ -->
	<section>
		<title>什么是 IPFS</title>
		<para>IPFS “星际文件系统”
			是去中心化保存和共享文件的分布式文件系统，它是一种内容可寻址、版本化、点对点超媒体的分布式协议，IPFS旨在替代HTTP。它希望将所有的计算设备都连接到同一个文件系统中。
		</para>
		<para>由于 IPFS 去中心化特点，使得很多区块链项目做文件存储的时候首选IPFS。</para>
		<section>
			<title>传统的中心化HTTP服务</title>
			<para>举个例子，服务器上有一个文件https://www.netkiller.cn/video/av.mp4，按照HTTP协议标准流程，浏览器首先会解析域名并查找到服务器的IP地址，随后与服务器建立链接，并根据路径向服务器请求该文件/video/av.mp4。在这种体系下用户是否能获取该文件取决于文件是否被移动或删除，并且服务器没有关闭。
			</para>
			<para>另一个问题就是文件服务器管理，中心化管理是很复杂的，如果访问量比较大，我们通常会使用负载均衡来解决，负载均衡需要每个节点上的数据是完整的，这就需要大量的数据同步。如果从深圳数据中心同步到上海数据中心
				100T的数据可能要数个工作日。
			</para>
			<para>HTTP过度依赖Internet主干网，同时网络通信遭遇DDoS攻击的风险也大大增加。</para>
			<para>CDN 只解决最后一公里的性能问题，数据回源仍然是中心化，仍然无法彻底解决。</para>
		</section>
		<section>
			<title>IPFS 解决方案</title>
			<para>IPFS的做解决方案是不再关心中心服务器的位置，也不考虑文件的名字和路径，只关注文件中的内容。例如将文件av.mp4添加到IPFS节点，会得到一个新名字QmS8R3nSbDHjQ7WRTjtX1pkiQ6BUpti9qTjweZkBgGPKiN，通过文件内容计算出的哈希值，访问文件不在使用文件名而是使用这个统一的
				hash 值。
			</para>
			<para>当用户被请求一个文件哈希时，它会根据这个分布式哈希表找到文件所在的节点，并取回文件内容并验证文件数据。大文件会被切分成小的分块，下载的时候可以从多个服务器同时获取。
			</para>
			<para>IPFS 可以理解为内容被永久缓存到节点上的CDN。</para>
		</section>
	</section>
	<section id="ipfs.setup">
		<title>安装 IPFS</title>
		<section id="ipfs.go.get">
			<title>go get 方式</title>
			<screen>
			<![CDATA[
$ go get -u -d github.com/ipfs/go-ipfs

$ cd $GOPATH/src/github.com/ipfs/go-ipfs
$ make install
			]]>
			</screen>
		</section>
		<section id="ipfs-update">
			<title>安装 ipfs-update</title>
			<para>ipfs-update 是一个 ipfs 版本管理工具，可以通过这个工具安装ipfs 和升级 ipfs.</para>
			<screen>
			<![CDATA[
# go get -u github.com/ipfs/ipfs-update

# ipfs-update install latest
			]]>
			</screen>
		</section>
		<section id="ubuntu">
			<title>Ubuntu</title>
			<screen>
			<![CDATA[
neo@netkiller ~ % sudo apt install golang1.9			
			]]>
			</screen>
		</section>
		<section id="netkiller.oscm.ipfs">
			<title>Netkiller OSCM</title>
			<section id="oscm.source">
				<title>源码安装</title>
				<screen>
				<![CDATA[		
curl -s https://raw.githubusercontent.com/oscm/shell/master/distributed/ipfs/go-ipfs-0.4.14.sh | bash
curl -s https://raw.githubusercontent.com/oscm/shell/master/distributed/ipfs/ipfs-update-1.5.2.sh | bash
				]]>
				</screen>
			</section>
			<section id="oscm.ipfs-update">
				<title>ipfs-update</title>
				<screen>
				<![CDATA[
[root@netkiller ~]# curl -s https://raw.githubusercontent.com/oscm/shell/master/lang/golang/golang-1.11.sh | bash					
[root@netkiller ~]# curl -s https://raw.githubusercontent.com/oscm/shell/master/distributed/ipfs/ipfs-update.sh | bash

[root@netkiller ~]# ./go/bin/ipfs-update versions
[root@netkiller ~]# ./go/bin/ipfs-update install latest				
				]]>
				</screen>
			</section>
		</section>
		<section id="ipfs.mac">
			<title>Mac OS</title>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~ % brew install ipfs			
			]]>
			</screen>
		</section>
	</section>
</chapter>