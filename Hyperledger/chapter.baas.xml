<?xml version="1.0" encoding="UTF-8"?>
<chapter id="index"><?dbhtml dir="baas" ?>
	<title>BaaS (Blockchain as a Service) 平台</title>

	<section id="huawei">
		<title>Huawei BCS</title>
		<para>华为的 Hyperledger Fabric BaaS 尚处在测试阶段，申请地址是 https://www.huaweicloud.com/product/bcs.html 服务可以免费申请，但是需要</para>
		<section>
			<title>创建 BCS 服务</title>
			<para>
				打开网址
				<ulink url="https://www.huaweicloud.com/product/bcs.html" />
			</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-1.png" width="1024" srccredit="netkiller" />
			<para>点击按钮 “立即体验”</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-2.png" width="1024" srccredit="netkiller" />
			<para>点击“购买区块链服务”按钮</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-3.png" width="1024" srccredit="netkiller" />
			<para>共识策略选择 Kafka(CFT), 输入链代码初始管理密码。</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-4.png" width="1024" srccredit="netkiller" />
			<para>这里可以创建通道，也可以略过，后面可以创建。</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-5.png" width="1024" srccredit="netkiller" />
			<para>经过一段时间初始化云主机，最终完成 BCS 创建。</para>

		</section>
		<section>
			<title>管理通道</title>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-6.png" width="1024" srccredit="netkiller" />
			<para>创建通道，输入通道名称和描述，点击确定按钮。</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-7.png" width="1024" srccredit="netkiller" />
			<para>创建好的通道，会显示“暂无节点加入”，点击右边 “加入节点” 连接</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-8.png" width="1024" srccredit="netkiller" />
			<para>选择加入组织的数量</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-9.png" width="1024" srccredit="netkiller" />
			<para>节点添加完毕</para>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-10.png" width="1024" srccredit="netkiller" />
		</section>
		<section>
			<title>安装链码</title>
			<para>首先将 chaincode 源码压缩成 zip 文件</para>
			<screen>
			<![CDATA[
neo@MacBook-Pro ~/chaincode % zip token.zip token.go
  adding: token.go (deflated 82%)
  
neo@MacBook-Pro ~/chaincode % ls token.*
token.go  token.zip			
			]]>
			</screen>
			<graphic format="png" fileref="../../images/baas/huawei/bcs-5.png" width="1024" srccredit="netkiller" />
			<para>点击右边 “链代码管理” 按钮</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-1.png" width="1024" srccredit="netkiller" />
			<para>进入链码管理界面</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-2.png" width="1024" srccredit="netkiller" />
			<para>Organization 选择组织， Peer 选择节点，点击 “Install Chaincode” 按钮。</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-3.png" width="1024" srccredit="netkiller" />
			<para>输入连码名称、版本、并上传 链码对应的 zip 文件。</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-4.png" width="1024" srccredit="netkiller" />
			<para>链码安装成功</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-5.png" width="1024" srccredit="netkiller" />
			<para>实例化链码</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-6.png" width="1024" srccredit="netkiller" />
			<para>输入调用的函数，和传递的参数，点击 OK 按钮</para>
			<graphic format="png" fileref="../../images/baas/huawei/chaincode-7.png" width="1024" srccredit="netkiller" />
			<para>执行成功</para>
		</section>
		<section>
			<title>下载 SDK 配置</title>
			<graphic format="png" fileref="../../images/baas/huawei/sdk-1.png" width="1024" srccredit="netkiller" />
			<graphic format="png" fileref="../../images/baas/huawei/sdk-2.png" width="1024" srccredit="netkiller" />
			<para>链代码名称是之前安装链码时输入的名称</para>
			<para>链代码版本是当前的链码版本</para>
			<para>证书存放根路径填写: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto</para>
			<para>点击下载按钮后得到一个 bcs-itetze-sdk-config.zip 文件，解压开 bcs-itetze-sdk-config.yaml</para>
			<screen>
			<![CDATA[
name: "global-trade-network"

x-type: "hlfv1"
x-loggingLevel: info

description: "The network to be in if you want to stay in the global trade business"

version: 1.0.0

client:

  organization: 266d0f487933503a48f0ab728b85d5b469cb2b79

  logging:
    level: info

  peer:
    timeout:
      connection: 10s
      queryResponse: 45s
      executeTxResponse: 120s
  eventService:
    timeout:
      connection: 10s
      registrationResponse: 50s
  orderer:
    timeout:
      connection: 10s
      response: 45s

  cryptoconfig:
    path: /opt/gopath/src/github.com/hyperledger/fabric

  credentialStore:
    path: "/tmp/hfc-kvs"

    cryptoStore:
      path: /tmp/msp

    wallet: wallet-name

  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     ephemeral: false
     level: 256

channels:
  
  netkiller:
    orderers:
      
      - orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-0.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      
      - orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-1.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      
      - orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-2.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      
      - orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-3.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      
      - orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-4.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      
    peers:
      
      peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
      
    chaincodes:
      - netkiller:1.0.0
  
organizations:
  
  266d0f487933503a48f0ab728b85d5b469cb2b79:
    mspid: 266d0f487933503a48f0ab728b85d5b469cb2b79MSP

    cryptoPath:  /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/266d0f487933503a48f0ab728b85d5b469cb2b79.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local/msp
    tlsCryptoKeyPath: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/266d0f487933503a48f0ab728b85d5b469cb2b79.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local/tls/server.key
    tlsCryptoCertPath: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/266d0f487933503a48f0ab728b85d5b469cb2b79.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local/tls/server.crt

    peers:
      
      - peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local
      
    certificateAuthorities:
      - ca-org1

    adminPrivateKey:
      pem: "-----BEGIN PRIVATE KEY----- <etc>"
    signedCert:
      path: "/tmp/somepath/signed-cert.pem"
  
  ordererorg:
      mspID: "7d8abfe15c3f1389f0468d90e27a382d0bd90b3fMSP"

      cryptoPath: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp
#orderer eip: 49.4.85.126
orderers:
  
  orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-0.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:
    url: grpcs://orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-0.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:30805

    grpcOptions:
      ssl-target-name-override: orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-0.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp/tlscacerts/tlsca.7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-cert.pem
  
  orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-1.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:
    url: grpcs://orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-1.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:30806

    grpcOptions:
      ssl-target-name-override: orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-1.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp/tlscacerts/tlsca.7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-cert.pem
  
  orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-2.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:
    url: grpcs://orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-2.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:30807

    grpcOptions:
      ssl-target-name-override: orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-2.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp/tlscacerts/tlsca.7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-cert.pem
  
  orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-3.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:
    url: grpcs://orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-3.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:30808

    grpcOptions:
      ssl-target-name-override: orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-3.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp/tlscacerts/tlsca.7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-cert.pem
  
  orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-4.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:
    url: grpcs://orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-4.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local:30809

    grpcOptions:
      ssl-target-name-override: orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-4.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.orderer-7d8abfe15c3f1389f0468d90e27a382d0bd90b3f.default.svc.cluster.local/msp/tlscacerts/tlsca.7d8abfe15c3f1389f0468d90e27a382d0bd90b3f-cert.pem
  
#peer eip: 49.4.85.126
peers:
  
  peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local:
    url: grpcs://peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local:30605

    eventUrl: grpcs://peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local:30705

    grpcOptions:
      ssl-target-name-override: peer-266d0f487933503a48f0ab728b85d5b469cb2b79-0.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local
      grpc.http2.keepalive_time: 15

    tlsCACerts:
      path: /opt/gopath/src/github.com/hyperledger/api-server/conf/crypto/266d0f487933503a48f0ab728b85d5b469cb2b79.peer-266d0f487933503a48f0ab728b85d5b469cb2b79.default.svc.cluster.local/msp/tlscacerts/tlsca.266d0f487933503a48f0ab728b85d5b469cb2b79-cert.pem
  
certificateAuthorities:
  ca-org1:
    url: https://ca_peerOrg1:7054
    httpOptions:
      verify: true
    tlsCACerts:
      path: $GOPATH/src/github.com/hyperledger/fabric-sdk-go/test/api-server/tls/fabricca/certs/ca_root.pem
      client:
       keyfile: $GOPATH/src/github.com/hyperledger/fabric-sdk-go/test/api-server/tls/fabricca/certs/client/client_fabric_client-key.pem
       certfile: $GOPATH/src/github.com/hyperledger/fabric-sdk-go/test/api-server/tls/fabricca/certs/client/client_fabric_client.pem

    registrar:
      enrollId: admin
      enrollSecret: adminpw
    caName: ca-org1
			]]>
			</screen>
		</section>
	</section>
</chapter>