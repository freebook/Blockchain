<?xml version="1.0" encoding="UTF-8"?>
<chapter id="eos.contract">
	<title>智能合约开发</title>


	<section id="WebAssembly">
		<title>WebAssembly</title>
		<para>EOS 的块链使用的是WebAssembly(http://webassembly.org/) 技术，编译后的 (WASM) 执行用户编写的智能合约。WASM是一种新兴的Web标准，广泛支持于谷歌、微软、苹果等。WASM标准的智能合约使用C/C++语言编写，使用clang/llvm(https://clang.llvm.org/) 编译。</para>

	</section>
	<section id="eos.contract.file">
		<title>只能合约文件</title>
		<para>创建智能合约</para>
		<screen>
		<![CDATA[
$ eosiocpp -n ${contract}		
		]]>
		</screen>
		<para>运行上面的命令会在./${project}目录下创建一个空的项目，它包含3个文件。</para>
		<screen>
		<![CDATA[
${contract}.abi ${contract}.hpp ${contract}.cpp		
		]]>
		</screen>
		<para>有些情况我们发现没有 hpp 文件，所以 hpp 是可有可无的。</para>
		<section>
			<title>hpp 头文件</title>
			<para>${contract}.hpp 这是合约的头文件，可以包含一些变量，常量和函数的声明。</para>
		</section>
		<section>
			<title>cpp 合约代码文件</title>
			<para>${contract}.cpp 这是合约的源码文件，包含合约的具体实现。</para>
		</section>
		<section>
			<title>abi 文件</title>
			<para>作用类似以太坊的 ABI 文件。 ABI（ Application Binary Interface）文件是一个JSON格式的描述文件，说明了如何在他们的JSON和二进制之间转化用户的action。</para>
			<para>ABI文件也同时说明了如何转换数据库的状态。一旦你用了ABI描述了你的合约，开发人员就和用户就可以和你的合约通过JSON进行交互。</para>
			<para>ABI文件可以通过eosiocpp命令使用.hpp文件生成。</para>
			<screen>
			<![CDATA[
$ eosiocpp -g ${contract}.abi ${contract}.hpp			
			]]>
			</screen>
		</section>
	</section>
	<section id="eosiocpp">
		<title>eosiocpp 命令</title>
		<section>
			<title>创建新合约</title>
			<para></para>
			<screen>
			<![CDATA[
[root@iZj6c39y62jl5b1wmfv6u8Z test]# eosiocpp -n hello
created hello from skeleton

[root@iZj6c39y62jl5b1wmfv6u8Z test]# find hello/
hello/
hello/hello.hpp
hello/hello.cpp			
			]]>
			</screen>
			<programlisting>
			<![CDATA[

			]]>
			</programlisting>
		</section>
		<section>
			<title>编译 WAST 文件</title>
			<screen>
			<![CDATA[
eosiocpp -o output.wast contract.cpp			
			]]>
			</screen>
		</section>
		<section>
			<title>编译 ABI 文件</title>
			<screen>
			<![CDATA[
eosiocpp -g contract.abi types.hpp
			]]>
			</screen>
		</section>
	</section>
	<section id="eosio.token">
		<title>eosio.token 合约详解</title>
		<section id="token::create">
			<title>token::create 方法</title>
			<screen>
				<![CDATA[
void token::create( account_name issuer,
                    asset        maximum_supply,
                    uint8_t      issuer_can_freeze,
                    uint8_t      issuer_can_recall,
                    uint8_t      issuer_can_whitelist )				
				]]>
			</screen>
		</section>
		<section id="token::issue">
			<title>token::issue 方法</title>
			<screen>
				<![CDATA[
void token::issue( account_name to, asset quantity, string memo )
				]]>
			</screen>
		</section>
		<section id="token::transfer">
			<title>token::transfer 转账方法</title>
			<screen>
				<![CDATA[
void token::transfer( account_name from,
                      account_name to,
                      asset        quantity,
                      string       memo )				
				]]>
			</screen>
		</section>
	</section>
	<section id="contract.hello">
		<title>编译运行 hello 智能合约</title>
		<para>hello 智能合约是官方提供的一个智能合约例子</para>
		<para>源码</para>
		<programlisting>
		<![CDATA[
[root@netkiller hello]# cat /usr/local/src/eos/contracts/hello/hello.cpp 
#include <eosiolib/eosio.hpp>
using namespace eosio;

class hello : public eosio::contract {
  public:
      using contract::contract;

      /// @abi action 
      void hi( account_name user ) {
         print( "Hello, ", name{user} );
      }
};

EOSIO_ABI( hello, (hi) )		
		]]>
		</programlisting>
		<para>编译智能合约</para>
		<screen>
		<![CDATA[
cd /usr/local/src/eos/build/contracts/hello

[root@netkiller hello]# make 
[  4%] Built target libc++
[  4%] Built target wasm
[  4%] Built target ast
[  4%] Built target asmjs
[  4%] Built target cfg
[ 10%] Built target passes
[ 12%] Built target support
[ 14%] Built target eosio-s2wasm
[ 16%] Built target Platform
[ 16%] Built target Logging
[ 16%] Built target IR
[ 16%] Built target WASM
[ 16%] Built target WAST
[ 16%] Built target eosio-wast2wasm
[ 18%] Built target eosiolib
[ 97%] Built target libc
[100%] Built target hello
		]]>
		</screen>
		<screen>
		<![CDATA[
[root@netkiller hello]# cleos wallet unlock
password: Unlocked: default

[root@netkiller hello]# cleos set contract contract.hello /usr/local/src/eos/build/contracts/hello -p eosio
Reading WAST/WASM from /usr/local/src/eos/build/contracts/hello/hello.wasm...
Using already assembled WASM...
Publishing contract...
executed transaction: f5695465f35b153d65c36cb0e07443fd3d8ccadde9c1daf8c472b0a7e84196b0  4160 bytes  1040 us
#         eosio <= eosio::setcode               "0000000000ea30550000e2170061736d01000000013b0c60027f7e006000017e60027e7e0060027f7f006000017f60027f7...
#         eosio <= eosio::setabi                "0000000000ea3055912b0e656f73696f3a3a6162692f312e30000102686900010475736572046e616d65010000000000008...
warning: transaction executed locally, but may not be confirmed by the network yet
		]]>
		</screen>
		<screen>
		<![CDATA[
[root@netkiller hello]# cleos push action eosio hi '["neo"]' -p eosio
executed transaction: 476fa2416d227ffe078285714d10d2d726b8e9cc18b9f0ba672bfc1ef93efbd5  104 bytes  284 us
#         eosio <= eosio::hi                    {"user":"neo"}
warning: transaction executed locally, but may not be confirmed by the network yet
		]]>
		</screen>
	</section>
	<section id="contract.dice">
		<title>dice</title>
		<!-- https://eosfans.io/topics/326 -->
	</section>
	&chapter.eos.contract.curd.xml;
</chapter>